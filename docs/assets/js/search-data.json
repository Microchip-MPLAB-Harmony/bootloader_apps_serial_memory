{"0": {
    "doc": "License",
    "title": "License",
    "content": "MICROCHIP SOFTWARE IS PROVIDED SOLELY TO ASSIST YOU IN DEVELOPING PRODUCTS AND SYSTEMS THAT USE MICROCHIP PRODUCTS. DOWNLOAD AND/OR USE OF THE SOFTWARE REQUIRES THAT YOU ACCEPT THIS SOFTWARE LICENSE AGREEMENT. IF YOU DO NOT WISH TO ACCEPT THESE TERMS, DO NOT DOWNLOAD OR USE ANY OF THE SOFTWARE. DOWNLOADING OR USING THE SOFTWARE CONTITUTES YOUR ACCEPTANCE OF THIS SOFTWARE LICENSE AGREEMENT. SOFTWARE LICENSE AGREEMENT . This Software License Agreement (“Agreement”) is an agreement between you (if licensing as an individual) or the entity you represent (if licensing as a business) (“you” or “Licensee”) and Microchip Technology Incorporated, a Delaware corporation, with a place of business at 2355 W. Chandler Blvd., Chandler, AZ 85224-6199, and its affiliates including Microchip Technology Ireland Limited, a company organized under the laws of Ireland, with a principal address at Ground Floor, Block W., East Point Business Park, Dublin, Ireland 3 (collectively, “Microchip”) for the Microchip MPLAB Harmony Integrated Software Framework and documentation included in the download or otherwise provided by Microchip to Licensee (collectively, the “Software”). 1. Use. Subject to the terms of this Agreement, Microchip hereby grants Licensee a limited, revocable, non-exclusive, non-transferable, worldwide license to (a) use the Software, and (b) modify the Software provided in source code form, if any (and use and copy modifications of such Software made by Licensee), provided that in each case (with respect to clauses (a) and (b)) Licensee solely uses the Software with Microchip Products, Licensee Products, or other products agreed to by Microchip in writing. Licensee has no right to (i) substitute third party products for Microchip Products, or (ii) except as expressly provided in Section 2 below, sublicense its rights under this Agreement or otherwise disclose or distribute the Software to any third party. Licensee may make a reasonable number of copies of the Software solely as necessary to exercise its license rights in this Section 1. Licensee will not remove or alter any copyright, trademark, or other proprietary notices contained on or in the Software or any copies. “Microchip Products” means those Microchip devices purchased from Microchip or one of its authorized distributors that are identified in the Software, or if not identified in the Software, then such Microchip devices that are consistent with the purpose of the Software, including but not limited to Microchip 32-bit microcontroller and microprocessor devices and the like. “Licensee Products” means products manufactured by or for Licensee that use or incorporate Microchip Products. 2. Subcontractors. If Licensee wishes for its subcontractor to obtain and use the Software in order to provide design, manufacturing, or other services to Licensee: (a) such subcontractor may (i) download and agree to the terms of this Agreement or (ii) contact Microchip directly for a copy of this Agreement and agree to its terms; or (b) Licensee may sublicense the rights described in Section 1 directly to its subcontractor, provided that (i) such subcontractor agrees in writing to the terms of this Agreement - a copy of which will be provided to Microchip upon request, and (ii) Licensee is liable for such subcontractor's acts and omissions. 3. Third Party Software. (a) Third Party Materials. Licensee agrees to comply with third party license terms applicable to Third Party Materials, if any. Microchip will not be held responsible for Licensee's failure to comply with such terms. Microchip has no obligation to provide support or maintenance for Third Party Materials. \"Third Party Materials\" means the third party software, systems, tools, or specifications (including those of a standards setting organization) referenced in, bundled with, or included in the Software. (b) Open Source Components. Notwithstanding the license grant in Section 1 above, Licensee acknowledges that the Software may include Open Source Components. To the extent required by the licenses covering Open Source Components, the terms of such license apply in lieu of the terms of this Agreement. To the extent the terms of the licenses applicable to Open Source Components prohibit any of the restrictions in this Agreement with respect to such Open Source Components, those restrictions will not apply to the Open Source Component. \"Open Source Components\" means components of the Software that are subject to the terms of an Open Source License. \"Open Source License\" means any software license approved as an open source license by the Open Source Initiative or any substantially similar license, including without limitation any license that, as a condition of distribution of the software licensed under such license, requires that the distributor make the software available in source code format. 4. Licensee Obligations. (a) Restrictions. Except as expressly permitted by this Agreement, Licensee agrees that it will not (i) modify or alter the Software or a Microchip Product; (ii) adapt, translate, decompile, reverse engineer, disassemble the Software provided in object code form, any Microchip Product, or any samples or prototypes provided by Microchip, or create derivative works thereof; or (iii) use the Software with any software or other materials that are subject to licenses or restrictions (e.g., Open Source Licenses) that, when combined with the Software, would require Microchip to disclose, license, distribute, or otherwise make all or any part of such Software available to anyone. (b) Indemnity. Licensee will indemnify (and, at Microchip's election, defend) Microchip from and against any and all claims, costs, damages, expenses (including reasonable attorneys' fees), liabilities, and losses, arising out of or related to: (i) Licensee's modification, disclosure, or distribution of the Software or Third Party Materials; (ii) the use, sale, or distribution of Licensee Products; and (iii) an allegation that Licensee Products or Licensee's modification of the Software infringe third party intellectual property rights. (c) Licensee Products. Licensee understands and agrees that Licensee remains responsible for using its independent analysis, evaluation, and judgment in designing Licensee Products and systems and has full and exclusive responsibility to assure the safety of its products and compliance of its products (and of all Microchip Products used in or for such Licensee Products) with applicable laws and requirements. 5. Confidentiality. (a) Licensee agrees that the Software, underlying inventions, algorithms, know-how, and ideas relating to the Software, and any other non-public business or technical information disclosed by Microchip to Licensee are confidential and proprietary information, including information derived therefrom, belonging to Microchip and its licensors (collectively, \"Confidential Information\"). Licensee will use Confidential Information only to exercise its rights and perform its obligations under this Agreement and will take all reasonable measures to protect the secrecy of and avoid unauthorized access, disclosure, and use of Confidential Information. Such measures include, but are not limited to, the highest degree of care that it uses to protect its own information of a similar nature, but not less than reasonable care. Licensee will only disclose Confidential Information to its employees, subcontractors, consultants, auditors and representatives (collectively \"Representatives\") who have a need to know such information and who have use and confidentiality obligations to Licensee at least as restrictive as those set forth in this Agreement. Licensee is responsible for disclosure or misuse of Confidential Information by its Representatives. Use of Confidential Information for personal gain, for the benefit of a third party or to compete with Microchip, whether directly or indirectly, is a breach of this Agreement. Licensee will notify Microchip in writing of any actual or suspected misuse, misappropriation, or unauthorized disclosure of Confidential Information that comes to Licensee's attention. Confidential Information will not include information that: (i) is or becomes publicly available without breach of this Agreement; (ii) is known or becomes known to Licensee from a source other than Microchip without restriction and without breach of this Agreement or violation of Microchip's rights, as demonstrated by credible evidence in existence at the time of disclosure; (iii) is independently developed by Licensee without use of or reference to the Confidential Information, as demonstrated by credible evidence in existence at the time of independent development; or (iv) is disclosed generally to third parties by Microchip without restrictions similar to those contained in this Agreement. Licensee may disclose Confidential Information to the extent required under law, rule, or regulation (including those of any national securities exchange), by subpoena, civil investigative demand, or similar process, or by a court or administrative agency (each a \"Requirement\"'), provided, that to the extent permitted by applicable law, Licensee will provide prompt notice of such Requirement to Microchip to enable Microchip to seek a protective order or otherwise prevent or restrict such disclosure. (b) Return of Materials. Upon Microchip's request and direction, Licensee will promptly return or destroy the Confidential Information, including any physical information or materials provided to Licensee (together with any copies, excerpts, syntheses, CD ROMS, diskettes, etc.), and, in the case of information derived therefrom, provide written certification that all the Confidential Information has been expunged from any such materials or that all such materials have been destroyed. Further, if Licensee or its affiliates become competitors of Microchip, and Microchip notifies Licensee in writing of its status as a competitor in a given market, then Licensee will promptly engage in the return and certification process described above in this Section 5(b). 6. Ownership and Retention of Rights. All rights, title, and interest (including all intellectual property rights) in and to the Software, including any derivative works of the Software and any incremental modifications to the Software whether made by or for Licensee or Microchip (collectively, \"Microchip Property\"), are and will remain the sole and exclusive property of Microchip, whether such Microchip Property is separate or combined with any other products. Licensee, on behalf of itself and its affiliates, agrees to, and does hereby, assign to Microchip or its designee all right, title and interest (including all intellectual property rights) in and to derivative works of and any incremental modifications to the Software. Licensee will take (and will cause its affiliates, their subcontractors, and all related individuals to take) all action as may be reasonably necessary, proper or advisable to perfect and secure the ownership, licenses, intellectual property and other rights of or to Microchip as set forth in this Agreement. All rights not expressly granted under this Agreement are reserved to Microchip and its licensors and suppliers, and there are no implied rights. Licensee retains all right, title, and interest in and to any technology independently developed by Licensee not derived, directly or indirectly, from the Microchip Property or any other item of tangible property provided to Licensee by Microchip hereunder. 7. Termination. This Agreement will start once accepted by Licensee and continue unless and until terminated as provided in this Agreement. This Agreement automatically terminates immediately if Licensee violates the restrictions set forth in Sections 1, 2 or 4(a). Microchip may terminate this Agreement immediately upon notice if (a) Licensee or its affiliates become competitors of Microchip, or (b) Licensee breaches any other term of this Agreement and does not cure such breach within 30 days after receipt of written notice of such breach from Microchip. Upon termination of this Agreement, (i) the license grants in Sections 1 and 2(b) terminate, and (ii) Licensee will return to Microchip or destroy (and certify the destruction of) all Microchip Property and Confidential Information in its possession or under its control, and all copies thereof. The following sections survive termination of this Agreement: 3, 4, 5, 6, 7, 8, 9, 10, 11 and 12. 8. Dangerous Applications. The Software is not fault-tolerant and is not designed, manufactured, or intended for use in hazardous environments requiring failsafe performance (\"Dangerous Applications\"). Dangerous Applications include the operation of nuclear facilities, aircraft navigation, aircraft communication systems, air traffic control, direct life support machines, weapons systems, or any environment or system in which the failure of the Software could lead directly or indirectly to death, personal injury, or severe physical or environmental damage. Microchip specifically disclaims (a) any express or implied warranty of fitness for use of the Software in Dangerous Applications; and (b) any and all liability for loss, damages and claims resulting from the use of the Software in Dangerous Applications. 9. EU Consumers - Applicable Terms. WHERE LICENSEE IS A CONSUMER LOCATED IN EUROPE, THE FOLLOWING PROVISIONS APPLY INSTEAD OF SECTIONS 9 AND 10 BELOW: Microchip and its licensors will not be liable (a) for any loss suffered by Licensee in connection with the Software where such loss was not reasonably foreseeable when the Software was first downloaded by Licensee, even if such loss was the result of negligence or the failure of Microchip and its licensors to comply with this Agreement; or (b) irrespective of the basis of claim, for any loss of revenue, profit or other business or economic loss suffered. Some Software is made available to Licensee free of charge, and Licensee may at any time download further copies without charge to replace the Software initially downloaded and others may require a fee to be downloaded, or to download any further copies. In all circumstances, to the extent liability may lawfully be limited or excluded, the cumulative liability of Microchip and its licensors will not exceed USD$1,000 (or equivalent sum in the currency of the country in which Licensee resides). However, none of the foregoing limits or excludes any liability for death or personal injury arising from negligence, or for fraud, fraudulent misrepresentation or any other cause that by law cannot be excluded and limited. 10. Warranty Disclaimers. EXCEPT FOR CONSUMERS TO WHOM SECTION 8 APPLIES, THE SOFTWARE IS LICENSED ON AN \"AS-IS\" BASIS. MICROCHIP MAKES NO WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER EXPRESS, IMPLIED, STAUTORY OR OTHERWISE, AND EXPRESSLY DISCLAIMS ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE OR NON-INFRINGEMENT AND ANY WARRANTIES THAT MAY ARISE FROM USAGE OF TRADE OR COURSE OF DEALING. MICROCHIP AND ITS LICENSORS HAVE NO OBLIGATION TO CORRECT ANY DEFECTS IN THE SOFTWARE. TECHNICAL ASSISTANCE, IF PROVIDED, WILL NOT EXPAND THESE WARRANTIES. IF CUSTOMER IS A CONSUMER, THE ABOVE WILL NOT ACT TO EXCLUDE YOUR STATUTORY RIGHTS. 11. Limited Liability. EXCEPT FOR CONSUMERS TO WHOM SECTION 8 APPLIES, IN NO EVENT WILL MICROCHIP BE LIABLE, WHETHER IN CONTRACT, WARRANTY, REPRESENTATION, TORT, STRICT LIABILITY, INDEMNITY, CONTRIBUTION OR OTHERWISE, FOR ANY INDIRECT, SPECIAL, PUNITIVE, EXEMPLARY, INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND WHATSOEVER, HOWEVER CAUSED, OR ANY LOSS OF PRODUCTION, COST OF PROCUREMENT OF SUBSTITUTE PRODUCTS OR SERVICES, ANY LOSS OF PROFITS, LOSS OF BUSINESS, LOSS OF USE OR LOSS OF DATA, OR INTERRUPTION OF BUSINESS ARISING OUT OF THIS AGREEMENT, HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, EVEN IF MICROCHIP HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS, AND NOTWITHSTANDING ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY. MICROCHIP'S TOTAL AGGREGATE LIABILITY UNDER THIS AGREEMENT WILL NOT EXCEED USD$1,000. 12. General. (a) This Agreement will be governed by and construed in accordance with the laws of the State of Arizona and the United States, without regard to conflicts of law provisions. The parties hereby irrevocably consent to the exclusive personal jurisdiction and venue of the state and federal courts in Maricopa County, Arizona for any dispute relating to this Agreement. WHERE LICENSEE IS A CONSUMER LOCATED IN EUROPE, this Agreement is subject to the laws of the country in which the Software is downloaded, and, to the extent so mandated by such laws, subject to the jurisdiction of the courts of that country. The parties expressly disclaim the applicability of the United Nations Convention on Contracts for the International Sale of Goods in connection with this Agreement. (b) Unless the parties have a mutually executed agreement relating to the licensing of this Software by Microchip to Licensee (\"Signed Agreement\"), this Agreement constitutes the entire agreement between the parties with respect to the Software, and supersedes and replaces prior or contemporaneous written or verbal agreements or communications between the parties regarding the Software, including any purchase orders. If the parties have a Signed Agreement, this Agreement does not supersede or replace that Signed Agreement. This Agreement will not be modified except by a written agreement signed by an authorized representative of Microchip. If any provision of this Agreement is held by a court of competent jurisdiction to be illegal, invalid, or unenforceable, that provision will be limited or eliminated to the minimum extent necessary so that this Agreement will otherwise remain in full force and effect and enforceable. No waiver of any breach of any provision of this Agreement constitutes a waiver of any prior, concurrent, or subsequent breach of the same or any other provisions of this Agreement, and no waiver will be effective unless made in writing and signed by an authorized representative of the waiving party. (c) Licensee agrees to comply with all import and export laws and restrictions and regulations of the Department of Commerce or other United States or foreign agency or authority. (d) This Agreement will bind and inure to the benefit of each party's permitted successors and assigns. Licensee may not assign this Agreement in whole or in part, whether by law or otherwise, without Microchip's prior written consent. Any merger, consolidation, amalgamation, reorganization, transfer of all or substantially all assets or other change in control or majority ownership (\"Change of Control\") is considered an assignment for the purpose of this Section. Any attempt to assign this Agreement without such consent will be null and void. However, Microchip may assign this Agreement to an affiliate, or to another entity in the event of a Change of Control. (e) Licensee acknowledges its breach of any confidentiality or proprietary rights provision of this Agreement would cause Microchip irreparable damage, for which the award of damages would not be an adequate remedy. Licensee, therefore, agrees if Microchip alleges that Licensee has breached or violated any such provisions then Microchip may seek equitable relief, in addition to all other remedies at law or in equity. (f) Authorized representatives of Microchip shall have the right to reasonably inspect Licensee's premises and to audit Licensee's records and inventory of Licensee Products, whether located on Licensee's premises or elsewhere at any time, announced or unannounced, and in its sole and absolute discretion, in order to ensure Licensee's adherence to the terms of this Agreement. (g) Consistent with 48 C.F.R. §12.212 or 48 C.F.R. §227.7202-1 through 227.7202-4, as applicable, the Software is being licensed to U.S. Government end users (i) only as Commercial Items, and (ii) with only those rights as are granted to all other end users pursuant to the terms and conditions of the applicable Microchip licenses. To the extent the Software (or a portion thereof) qualifies as 'technical data' as such term is defined in 48 C.F.R. §252.227-7015(a)(5), then its use, duplication, or disclosure by the U.S. Government is subject to the restrictions set forth in subparagraphs (a) through (e) of the Rights in Technical Data clause at 48 C.F.R. §252.227-7015. Contractor/manufacturer is Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199. Questions about this Agreement should be sent to: Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199 USA. ATTN: Marketing. v.3.3.2021 . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/mplab_harmony_license.html",
    "relUrl": "/mplab_harmony_license.html"
  },"1": {
    "doc": "SPI EEPROM Bootloader",
    "title": "SPI EEPROM Bootloader",
    "content": "This example application shows how to use the Serial Memory Bootloader Library to bootload an application from SPI EEPROM (AT25) to Internal Flash. Serial Memory Bootloader Applications Block Diagram . Bootloader Application . | This is a bootloader application which resides from . | The starting location of the flash memory region for SAM devices | The starting location of the Program Flash memory for PIC32MM devices | . | . Performs Below Operation: . | Sets up the SPI EEPROM (AT25) using the AT25 Driver . | Checks if a firmware update is required by reading the MetaData stored in the last sector of SPI EEPROM . | If Firmware update is required then it jumps to Step 4 | . | If there was no firmware update request through MetaData, then it checks for any trigger implemented in application main() . | Here we use the On-board Switch to force trigger firmware update. | If no trigger is found then it jumps to Step 7 . | . | If firmware update is required then it . | Reads the programmer application binary stored from start of SPI EEPROM (0x0) . | Programs the read binary to application space in Internal Flash . | . | Once programming is done it generates a CRC32 value over programmed space and verifies it against the CRC32 stored in SPI EEPROM MetaData . | If CRC32 verification fails it goes into Error State | . | If CRC32 verification is successful, It clears the firmware update required flag in the SPI EEPROM MetaData and triggers a Soft Reset . | After reset, bootloader starts from Step 1 through Step 3 to do firmware update check and then jump to Step 7 | . | If there was no firmware update required then it . | Calls the SYS_Deinitialize() function which releases the resources used. This Function is device specific and has to be implemented based on application requirement . | Jumps to application space to run the programmer application . | . | . Programmer Application . | This is a SPI EEPROM programmer application which resides from . | The end of bootloader size in device flash memory for SAM devices | The end of bootloader size in Program Flash memory for PIC32MM devices | . | It will be loaded into internal flash memory from SPI EEPROM by bootloader application . | It blinks an LED every 500Ms and has capabilty to program SPI EEPROM (AT25) using AT25 Driver . | It uses the Virtual Com port of the device (EDBG port or External USB to UART converters) to receive the binary to be programmed in SPI EEPROM from host PC . | As the application running in internal flash should have capability to program SPI EEPROM, we send the programmer application binary itself via UART to be programmed in SPI EEPROM | . | It calls the APP_INPUT_Tasks() function which receives the binary to be programmed into SPI EEPROM over UART channel . | It uses the UART bootloader protocol but is updated to run along with other tasks | . | Once the binary is received and programmed from start location of SPI EEPROM it generates a CRC32 value over programmed SPI EEPROM space and verifies it against the CRC32 sent from host PC . | It Also Updates the CRC32 value received in the SPI EEPROM MetaData used by bootloader . | If CRC32 verification fails it goes into Error State then resets the APP_INPUT_Tasks() state to receive new binary . | . | If verification is successful then it . | Waits for one of below user event to update the MetaData and trigger bootloader via soft reset to program new binary in Internal Flash OR . | A Switch press OR | A Reboot command from Host PC | . | Waits for a new binary to be programmed in SPI EEPROM. | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_eeprom_bootloader/readme.html#spi-eeprom-bootloader",
    "relUrl": "/apps/spi_eeprom_bootloader/readme.html#spi-eeprom-bootloader"
  },"2": {
    "doc": "SPI EEPROM Bootloader",
    "title": "Development Kits",
    "content": "The following table provides links to documentation on how to build and run SPI EEPROM bootloader on different development kits . | Development Kit | . | SAM D21 Xplained Pro Evaluation Kit | . | PIC32MM USB Curiosity board | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_eeprom_bootloader/readme.html#development-kits",
    "relUrl": "/apps/spi_eeprom_bootloader/readme.html#development-kits"
  },"3": {
    "doc": "SPI EEPROM Bootloader",
    "title": "SPI EEPROM Bootloader",
    "content": ". To clone or download these application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_eeprom_bootloader/readme.html",
    "relUrl": "/apps/spi_eeprom_bootloader/readme.html"
  },"4": {
    "doc": "FS SPI Flash Bootloader",
    "title": "FS SPI Flash Bootloader",
    "content": "This example application shows how to use the File System Bootloader Library to bootload an application from SPI Flash memory (SST26) to Internal Flash. FS Serial Memory Bootloader Applications Block Diagram . Bootloader Application . | This is a File System based bootloader application which resides from . | The starting location of the Boot flash memory region for PIC32MZ devices . | Uses a Custom linker script btl.ld to place it in Boot flash memory | . | . | It uses the Harmony 3 File System Framework to read the application binary (image.bin) stored in SPI Flash Memory and program it into Internal flash memory . | It glows an LED once bootloader firmware is running . | Trigger Methods . | It uses the On board Switch OR a GPIO pin as bootloader trigger pin to force enter the bootloader at reset of device | It checks for bootloader request pattern (0x5048434D) from the starting 16 Bytes of RAM to force enter bootloader at reset of device | . | . Programmer Application . | This is a File system based SPI Flash programmer application which resides from . | The start of Program Flash memory for PIC32MZ devices | . | It will be loaded into internal flash memory from SPI Flash Memory by bootloader application . | Uses the Virtual Com port of the device (EDBG port or External USB to UART converters) to send console messages | . It Consist of three tasks . | SDCARD_Tasks(): . | Receives the binary file image.bin to be copied into SPI Flash from SD Card . | As the application running in internal flash should have capability to copy new binary file to SPI Flash memory, we copy the programmer application binary itself in SPI Flash Memory | . | Prints copying status on UART console | . | SERIAL_MEM_Tasks(): . | Formats the SPI Flash memory to FAT File System if not formatted . | Copies the binary file received by SDCARD_Tasks() to image.bin file in SPI Flash Memory. The copied image.bin from SPI Flash memory will be read by bootloader and programmed into internal flash . | Prints messages on UART console . | . | APP_MONITOR_Tasks(): . | Blinks an LED every 1 second . | Prints messages on UART console . | Uses On board Switch OR a GPIO pin to trigger bootloader once copying of image binary to SPI Flash memory is complete . | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/spi/readme.html#fs-spi-flash-bootloader",
    "relUrl": "/apps/fs/spi/readme.html#fs-spi-flash-bootloader"
  },"5": {
    "doc": "FS SPI Flash Bootloader",
    "title": "Development Kits",
    "content": "The following table provides links to documentation on how to build and run File System based SPI Flash bootloader on different development kits . | Development Kit | . | PIC32 WFI32E Curiosity Board | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/spi/readme.html#development-kits",
    "relUrl": "/apps/fs/spi/readme.html#development-kits"
  },"6": {
    "doc": "FS SPI Flash Bootloader",
    "title": "FS SPI Flash Bootloader",
    "content": ". To clone or download these application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/spi/readme.html",
    "relUrl": "/apps/fs/spi/readme.html"
  },"7": {
    "doc": "I2C EEPROM Bootloader",
    "title": "I2C EEPROM Bootloader",
    "content": "This example application shows how to use the Serial Memory Bootloader Library to bootload an application from I2C EEPROM (AT24) to Internal Flash. Serial Memory Bootloader Applications Block Diagram . Bootloader Application . | This is a bootloader application which resides from . | The starting location of the flash memory region for SAM devices | . | . Performs Below Operation: . | Sets up the I2C EEPROM (AT24) using the AT24 Driver . | Checks if a firmware update is required by reading the MetaData stored in the last sector of I2C EEPROM . | If Firmware update is required then it jumps to Step 4 | . | If there was no firmware update request through MetaData, then it checks for any trigger implemented in application main() . | Here we use the On-board Switch to force trigger firmware update. | If no trigger is found then it jumps to Step 7 . | . | If firmware update is required then it . | Reads the programmer application binary stored from start of I2C EEPROM (0x0) . | Programs the read binary to application space in Internal Flash . | . | Once programming is done it generates a CRC32 value over programmed space and verifies it against the CRC32 stored in I2C EEPROM MetaData . | If CRC32 verification fails it goes into Error State | . | If CRC32 verification is successful, It clears the firmware update required flag in the I2C EEPROM MetaData and triggers a Soft Reset . | After reset, bootloader starts from Step 1 through Step 3 to do firmware update check and then jump to Step 7 | . | If there was no firmware update required then it . | Calls the SYS_Deinitialize() function which releases the resources used. This Function is device specific and has to be implemented based on application requirement . | Jumps to application space to run the programmer application . | . | . Programmer Application . | This is a I2C EEPROM programmer application which resides from . | The end of bootloader size in device flash memory for SAM devices | . | It will be loaded into internal flash memory from I2C EEPROM by bootloader application . | It blinks an LED every 500Ms and has capabilty to program I2C EEPROM (AT24) using AT24 Driver . | It uses the Virtual Com port of the device (EDBG port or External USB to UART converters) to receive the binary to be programmed in I2C EEPROM from host PC . | As the application running in internal flash should have capability to program I2C EEPROM, we send the programmer application binary itself via UART to be programmed in I2C EEPROM | . | It calls the APP_INPUT_Tasks() function which receives the binary to be programmed into I2C EEPROM over UART channel . | It uses the UART bootloader protocol but is updated to run along with other tasks | . | Once the binary is received and programmed from start location of I2C EEPROM it generates a CRC32 value over programmed I2C EEPROM space and verifies it against the CRC32 sent from host PC . | It Also Updates the CRC32 value received in the I2C EEPROM MetaData used by bootloader . | If CRC32 verification fails it goes into Error State then resets the APP_INPUT_Tasks() state to receive new binary . | . | If verification is successful then it . | Waits for one of below user event to update the MetaData and trigger bootloader via soft reset to program new binary in Internal Flash OR . | A Switch press OR | A Reboot command from Host PC | . | Waits for a new binary to be programmed in I2C EEPROM. | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/i2c_eeprom_bootloader/readme.html#i2c-eeprom-bootloader",
    "relUrl": "/apps/i2c_eeprom_bootloader/readme.html#i2c-eeprom-bootloader"
  },"8": {
    "doc": "I2C EEPROM Bootloader",
    "title": "Development Kits",
    "content": "The following table provides links to documentation on how to build and run I2C EEPROM bootloader on different development kits . | Development Kit | . | SAM D21 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/i2c_eeprom_bootloader/readme.html#development-kits",
    "relUrl": "/apps/i2c_eeprom_bootloader/readme.html#development-kits"
  },"9": {
    "doc": "I2C EEPROM Bootloader",
    "title": "I2C EEPROM Bootloader",
    "content": ". To clone or download these application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/i2c_eeprom_bootloader/readme.html",
    "relUrl": "/apps/i2c_eeprom_bootloader/readme.html"
  },"10": {
    "doc": "SPI Flash Bootloader",
    "title": "SPI Flash Bootloader",
    "content": "This example application shows how to use the Serial Memory Bootloader Library to bootload an application from SPI Flash memory (SST26) to Internal Flash. Serial Memory Bootloader Applications Block Diagram . Bootloader Application . | This is a bootloader application which resides from . | The starting location of the Boot flash memory region for PIC32MZ devices . | Uses a Custom linker script btl.ld to place it in Boot flash memory | . | . | . Performs Below Operation: . | Sets up the SPI Flash (SST26) using the SST26 driver and SPI Peripheral Library . | Checks if a firmware update is required by reading the MetaData stored in the last sector of SPI Flash . | If Firmware update is required then it jumps to Step 4 | . | If there was no firmware update request through MetaData, then it checks for any trigger implemented in application main() . | Here we use the On-board Switch to force trigger firmware update. | If no trigger is found then it jumps to Step 7 . | . | If firmware update is required then it . | Reads the programmer application binary stored from start of SPI flash memory (0x0) . | Programs the read binary to application space in Internal Flash . | . | Once programming is done it generates a CRC32 value over programmed space and verifies it against the CRC32 stored in SPI Flash MetaData . | If CRC32 verification fails it goes into Error State | . | If CRC32 verification is successful, It clears the firmware update required flag in the SPI Flash MetaData and triggers a Soft Reset . | After reset, bootloader starts from Step 1 through Step 3 to do firmware update check and then jump to Step 7 | . | If there was no firmware update required then it . | Calls the SYS_Deinitialize() function which releases the resources used. This Function is device specific and has to be implemented based on application requirement . | Jumps to application space to run the programmer application . | . | . Programmer Application . | This is a SPI Flash programmer application which resides from . | The end of bootloader size in device flash memory for SAM devices . | The start of Program Flash memory for PIC32MZ devices . | Uses a Custom linker script app_mz.ld to place it in Program flash memory | . | . | It will be loaded into internal flash memory from SPI Flash Memory by bootloader application . | It blinks an LED every 500Ms and has capabilty to program SPI Flash memory (SST26) using SST26 Driver and SPI peripheral Library . | It uses the Virtual Com port of the device (EDBG port or External USB to UART converters) to receive the binary to be programmed in SPI Flash from host PC . | As the application running in internal flash should have capability to program SPI Flash memory, we send the programmer application binary itself via UART to be programmed in SPI Flash Memory | . | It calls the APP_INPUT_Tasks() function which receives the binary to be programmed into SPI flash memory over UART channel . | It uses the UART bootloader protocol but is updated to run along with other tasks | . | Once the binary is received and programmed from start location of SPI Flash memory it generates a CRC32 value over programmed SPI Flash space and verifies it against the CRC32 sent from host PC . | It Also Updates the CRC32 value received in the SPI Flash MetaData used by bootloader . | If CRC32 verification fails it goes into Error State then resets the APP_INPUT_Tasks() state to receive new binary . | . | If verification is successful then it . | Waits for one of below user event to update the MetaData and trigger bootloader via soft reset to program new binary in Internal Flash OR . | A Switch press OR | A Reboot command from Host PC | . | Waits for a new binary to be programmed in SPI Flash memory. | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_flash_bootloader/readme.html#spi-flash-bootloader",
    "relUrl": "/apps/spi_flash_bootloader/readme.html#spi-flash-bootloader"
  },"11": {
    "doc": "SPI Flash Bootloader",
    "title": "Development Kits",
    "content": "The following table provides links to documentation on how to build and run SPI Flash bootloader on different development kits . | Development Kit | . | PIC32 WFI32E Curiosity Board | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_flash_bootloader/readme.html#development-kits",
    "relUrl": "/apps/spi_flash_bootloader/readme.html#development-kits"
  },"12": {
    "doc": "SPI Flash Bootloader",
    "title": "SPI Flash Bootloader",
    "content": ". To clone or download these application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_flash_bootloader/readme.html",
    "relUrl": "/apps/spi_flash_bootloader/readme.html"
  },"13": {
    "doc": "Serial Memory Bootloader Host Tools",
    "title": "Serial Memory Bootloader Tools Help",
    "content": "This document describes the usage of Serial Memory bootloader host tools . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/tools/readme.html#serial-memory-bootloader-tools-help",
    "relUrl": "/tools/readme.html#serial-memory-bootloader-tools-help"
  },"14": {
    "doc": "Serial Memory Bootloader Host Tools",
    "title": "Downloading the host tools",
    "content": "To clone or download the host tools from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Following host tools are provided to be used with programmer application of different serial memory bootloaders . | Host Script | Description | . | uart_host.py | Used to communicate with the programmer application running on the device via UART interface | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/tools/readme.html#downloading-the-host-tools",
    "relUrl": "/tools/readme.html#downloading-the-host-tools"
  },"15": {
    "doc": "Serial Memory Bootloader Host Tools",
    "title": "Serial Memory Bootloader Host Tools",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/tools/readme.html",
    "relUrl": "/tools/readme.html"
  },"16": {
    "doc": "FS QSPI Flash Bootloader",
    "title": "FS QSPI Flash Bootloader",
    "content": "This example application shows how to use the File System Bootloader Library to bootload an application from QSPI Flash memory (SST26) to Internal Flash. FS Serial Memory Bootloader Applications Block Diagram . Bootloader Application . | This is a File System based bootloader application which resides from . | The starting location of the flash memory region for SAM devices . | The starting location of the Boot flash memory region for PIC32MZ devices . | Uses a Custom linker script btl.ld to place it in Boot flash memory | . | . | It uses the Harmony 3 File System Framework to read the application binary (image.bin) stored in QSPI Flash Memory and program it into Internal flash memory . | It glows an LED once bootloader firmware is running . | Trigger Methods . | It uses the On board Switch OR a GPIO pin as bootloader trigger pin to force enter the bootloader at reset of device | It checks for bootloader request pattern (0x5048434D) from the starting 16 Bytes of RAM to force enter bootloader at reset of device | . | . Programmer Application . | This is a File system based QSPI Flash programmer application which resides from . | The end of bootloader size in device flash memory for SAM devices . | The start of Program Flash memory for PIC32MZ devices . | . | It will be loaded into internal flash memory from QSPI Flash Memory by bootloader application . | Uses the Virtual Com port of the device (EDBG port or External USB to UART converters) to send console messages | . It Consist of three tasks . | SDCARD_Tasks(): . | Receives the binary file image.bin to be copied into QSPI Flash from SD Card . | As the application running in internal flash should have capability to copy new binary file to QSPI Flash memory, we copy the programmer application binary itself in QSPI Flash Memory | . | Prints copying status on UART console | . | SERIAL_MEM_Tasks(): . | Formats the QSPI Flash memory to FAT File System if not formatted . | Copies the binary file received by SDCARD_Tasks() to image.bin file in QSPI Flash Memory. The copied image.bin from QSPI Flash memory will be read by bootloader and programmed into internal flash . | Prints messages on UART console . | . | APP_MONITOR_Tasks(): . | Blinks an LED every 1 second . | Prints messages on UART console . | Uses On board Switch OR a GPIO pin to trigger bootloader once copying of image binary to QSPI Flash memory is complete . | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/qspi/readme.html#fs-qspi-flash-bootloader",
    "relUrl": "/apps/fs/qspi/readme.html#fs-qspi-flash-bootloader"
  },"17": {
    "doc": "FS QSPI Flash Bootloader",
    "title": "Development Kits",
    "content": "The following table provides links to documentation on how to build and run File System based QSPI Flash bootloader on different development kits . | Development Kit | . | Curiosity PIC32MZ EF 2.0 Development Board | . | SAM E54 Xplained Pro Evaluation Kit | . | SAM E70 Xplained Ultra Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/qspi/readme.html#development-kits",
    "relUrl": "/apps/fs/qspi/readme.html#development-kits"
  },"18": {
    "doc": "FS QSPI Flash Bootloader",
    "title": "FS QSPI Flash Bootloader",
    "content": ". To clone or download these application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/qspi/readme.html",
    "relUrl": "/apps/fs/qspi/readme.html"
  },"19": {
    "doc": "QSPI Flash Bootloader",
    "title": "QSPI Flash Bootloader",
    "content": "This example application shows how to use the Serial Memory Bootloader Library to bootload an application from QSPI Flash memory (SST26) to Internal Flash. Serial Memory Bootloader Applications Block Diagram . Bootloader Application . | This is a bootloader application which resides from . | The starting location of the flash memory region for SAM devices . | The starting location of the Boot flash memory region for PIC32MZ devices . | Uses a Custom linker script btl.ld to place it in Boot flash memory | . | . | . Performs Below Operation: . | Sets up the QSPI Flash (SST26) using the SST26 driver and QSPI/SQI peripheral Library . | Checks if a firmware update is required by reading the MetaData stored in the last sector of QSPI Flash . | If Firmware update is required then it jumps to Step 4 | . | If there was no firmware update request through MetaData, then it checks for any trigger implemented in application main() . | Here we use the On-board Switch to force trigger firmware update. | If no trigger is found then it jumps to Step 7 . | . | If firmware update is required then it . | Reads the programmer application binary stored from start of QSPI flash memory (0x0) . | Programs the read binary to application space in Internal Flash . | . | Once programming is done it generates a CRC32 value over programmed space and verifies it against the CRC32 stored in QSPI Flash MetaData . | If CRC32 verification fails it goes into Error State | . | If CRC32 verification is successful, It clears the firmware update required flag in the QSPI Flash MetaData and triggers a Soft Reset . | After reset, bootloader starts from Step 1 through Step 3 to do firmware update check and then jump to Step 7 | . | If there was no firmware update required then it . | Calls the SYS_Deinitialize() function which releases the resources used. This Function is device specific and has to be implemented based on application requirement . | Jumps to application space to run the programmer application . | . | . Programmer Application . | This is a QSPI Flash programmer application which resides from . | The end of bootloader size in device flash memory for SAM devices . | The start of Program Flash memory for PIC32MZ devices . | Uses a Custom linker script app_mz.ld to place it in Program flash memory | . | . | It will be loaded into internal flash memory from QSPI Flash Memory by bootloader application . | It blinks an LED every 500Ms and has capabilty to program QSPI Flash memory (SST26) using SST26 Driver and QSPI/SQI peripheral Library . | It uses the Virtual Com port of the device (EDBG port or External USB to UART converters) to receive the binary to be programmed in QSPI Flash from host PC . | As the application running in internal flash should have capability to program QSPI Flash memory, we send the programmer application binary itself via UART to be programmed in QSPI Flash Memory | . | It calls the APP_INPUT_Tasks() function which receives the binary to be programmed into QSPI flash memory over UART channel . | It uses the UART bootloader protocol but is updated to run along with other tasks | . | Once the binary is received and programmed from start location of QSPI Flash memory it generates a CRC32 value over programmed QSPI Flash space and verifies it against the CRC32 sent from host PC . | It Also Updates the CRC32 value received in the QSPI Flash MetaData used by bootloader . | If CRC32 verification fails it goes into Error State then resets the APP_INPUT_Tasks() state to receive new binary . | . | If verification is successful then it . | Waits for one of below user event to update the MetaData and trigger bootloader via soft reset to program new binary in Internal Flash OR . | A Switch press OR | A Reboot command from Host PC | . | Waits for a new binary to be programmed in QSPI Flash memory. | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/readme.html#qspi-flash-bootloader",
    "relUrl": "/apps/qspi_flash_bootloader/readme.html#qspi-flash-bootloader"
  },"20": {
    "doc": "QSPI Flash Bootloader",
    "title": "Development Kits",
    "content": "The following table provides links to documentation on how to build and run QSPI Flash bootloader on different development kits . | Development Kit | . | PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) | . | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . | SAM E54 Xplained Pro Evaluation Kit | . | SAM E70 Xplained Ultra Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/readme.html#development-kits",
    "relUrl": "/apps/qspi_flash_bootloader/readme.html#development-kits"
  },"21": {
    "doc": "QSPI Flash Bootloader",
    "title": "QSPI Flash Bootloader",
    "content": ". To clone or download these application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/readme.html",
    "relUrl": "/apps/qspi_flash_bootloader/readme.html"
  },"22": {
    "doc": "Application Configurations",
    "title": "Configuring an Application to be bootloaded",
    "content": ". | To bootload a CORTEX-M based application refer to Application Configurations for CORTEX-M based MCUs . | To bootload a MIPS based application refer to Application Configurations for MIPS based MCUs . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/docs/readme_configure_application.html#configuring-an-application-to-be-bootloaded",
    "relUrl": "/apps/docs/readme_configure_application.html#configuring-an-application-to-be-bootloaded"
  },"23": {
    "doc": "Application Configurations",
    "title": "Application Configurations",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/docs/readme_configure_application.html",
    "relUrl": "/apps/docs/readme_configure_application.html"
  },"24": {
    "doc": "Application Configurations for MIPS based MCUs",
    "title": "Configuring an application to be bootloaded for MIPS based MCUs",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/docs/readme_configure_application_pic32m.html#configuring-an-application-to-be-bootloaded-for-mips-based-mcus",
    "relUrl": "/apps/docs/readme_configure_application_pic32m.html#configuring-an-application-to-be-bootloaded-for-mips-based-mcus"
  },"25": {
    "doc": "Application Configurations for MIPS based MCUs",
    "title": "Linker configurations for the application to be bootloaded",
    "content": "Bootloader placement for various PIC32M product families . The bootloader is placed in Boot Flash Memory (BFM) or Program Flash Memory (PFM) based on the size of the bootloader and available Boot flash memory on the device. | If the bootloader fits into the available BFM, it is placed in BFM. The user application can use the complete area of the program Flash memory. | If the bootloader does not fit into the available BFM, it is placed in PFM. The user application can use the remaining area of the program Flash memory. | The following table shows the available Boot Flash memory and the placement of different bootloaders by product family. | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/docs/readme_configure_application_pic32m.html#linker-configurations-for-the-application-to-be-bootloaded",
    "relUrl": "/apps/docs/readme_configure_application_pic32m.html#linker-configurations-for-the-application-to-be-bootloaded"
  },"26": {
    "doc": "Application Configurations for MIPS based MCUs",
    "title": "Setting up the Application linker script",
    "content": "The linker script file of the application project has to be modified to place the vector table and reset handlers in program flash memory. | For Quick start, Refer to pre developed application linker scripts app_XX.ld placed in projects device specific configuration folder of bootloader_apps_xxx/ repository . | Reset Address for the application to be loaded through bootloader should match the Application start address mentioned in bootloader project. | The vector address of a given interrupt is calculated using Exception Base (EBASE) CPU register and the _ebase_address should be aligned to 4KB boundary . | Note: The below sections provides overview of changes required in the applications linker scripts. The address location and size may vary based on the specific device used . | . For Bootloaders placed in Boot Flash Memory (PIC32MZ and PIC32MK Devices) . | The application start address by default will be start of program flash memory . | Refer to specific device datasheet for program flash memory start address and length | . | The Initial 4KB from Application start address are used by Reset Handler and and cache_init section . | XC32 Compiler calculates offset from the EBASE address and initializes the value of interrupt vector offset (OFFx) register. The offset register is combined with EBASE register using a bitwise OR operator to obtain the interrupt vector address that the CPU will jump to when the corresponding interrupt occurs. | If the EBASE address is aligned to 4KB, then all the interrupt vectors must be located within the 4KB from base address. | Example: When _ebase_address is set to 0x9D001000 and interrupts vectors are not located withing the 4KB boundary from the ebase address (OFFx &gt; 0x1000), then the bitwise OR operator may not provide correct interrupt vector address. | . | To provide maximum flexibility in placement of interrupt vectors: . | Always place the _ebase_address at start of Program flash memory (Example : 0x9D000000) like the default linker script . | Change the offsets of exceptions and vector section to place them after the device startup code. With this the interrupt handlers can be located anywhere in the Program Flash memory. | . | Updated linker scripts as explained above is shown here as an example . | Note: Cache related sections are not applicable for PIC32MK Devices | . | . PROVIDE(_vector_spacing = 0x0001); PROVIDE(_ebase_address = 0x9D000000); /* Place the vector table and other exceptions after the device reset and * cache init code. */ PROVIDE(_ebase_vector_offsets = 0x1000); _RESET_ADDR = 0xBD000000; _SIMPLE_TLB_REFILL_EXCPT_ADDR = _ebase_address + _ebase_vector_offsets + 0; _CACHE_ERR_EXCPT_ADDR = _ebase_address + _ebase_vector_offsets + 0x100; _GEN_EXCPT_ADDR = _ebase_address + _ebase_vector_offsets + 0x180; kseg0_program_mem (rx) : ORIGIN = 0x9D001000, LENGTH = 0x200000 - 0x1000 kseg1_boot_mem : ORIGIN = 0xBD000000, LENGTH = 0x480 kseg1_boot_mem_4B0 : ORIGIN = 0xBD0004B0, LENGTH = 0x1000 - 0x4B0 /* Boot Sections */ .reset _RESET_ADDR : { KEEP(*(.reset)) KEEP(*(.reset.startup)) } &gt; kseg1_boot_mem .cache_init : { *(.cache_init) *(.cache_init.*) } &gt; kseg1_boot_mem_4B0 ... /* Interrupt vector table with vector offsets */ .vectors _ebase_address + _ebase_vector_offsets + 0x200 : { /* Symbol __vector_offset_n points to .vector_n if it exists, * otherwise points to the default handler. The * vector_offset_init.o module then provides a .data section * containing values used to initialize the vector-offset SFRs * in the crt0 startup code. */ . = ALIGN(4) ; __vector_offset_0 = (DEFINED(__vector_dispatch_0) ? (. - _ebase_address) : __vector_offset_default); KEEP(*(.vector_0)) ..... /* Default interrupt handler */ . = ALIGN(4) ; __vector_offset_default = . - _ebase_address; KEEP(*(.vector_default)) } &gt; kseg0_program_mem . For Bootloaders placed in Program Flash Memory (PIC32MK Devices) . | The bootloader code resides from start of Program flash memory, hence the application start address has to be after the end of bootloader. | Refer to specific device datasheet for program flash memory start address and length | . | The Initial 4KB from Application start address are used by Reset Handler section . | XC32 Compiler calculates offset from the EBASE address and initializes the value of interrupt vector offset (OFFx) register. The offset register is combined with EBASE register using a bitwise OR operator to obtain the interrupt vector address that the CPU will jump to when the corresponding interrupt occurs. | If the EBASE address is aligned to 4KB, then all the interrupt vectors must be located within the 4KB from base address. | Example: When _ebase_address is set to 0x9D001000 and interrupts vectors are not located withing the 4KB boundary from the ebase address (OFFx &gt; 0x1000), then the bitwise OR operator may not provide correct interrupt vector address. | . | To provide maximum flexibility in placement of interrupt vectors: . | Always place the _ebase_address at start of Program flash memory (Example : 0x9D000000) like the default linker script . | Note: As _ebase_address is only used to calculate the vector offset it can be placed at start of program flash memory even though the bootloader code is residing there . | Change the offsets of exceptions and vector section to place them after the device startup code of application. With this the interrupt handlers can be located anywhere in the Program Flash memory after bootloader space . | . | Updated linked scripts as explained above is shown here as an example. | Bootloader length &lt;bootloader_length&gt; in the below snippet needs to be replaced with size of the respective bootloader. | . | . PROVIDE(_vector_spacing = 0x0001); PROVIDE(_ebase_address = 0x9D000000); /* Place the vector table and other exceptions after the device reset and * cache init code. */ PROVIDE(_ebase_vector_offsets = &lt;bootloader_length&gt; + 0x1000); _RESET_ADDR = 0xBD000000 + &lt;bootloader_length&gt;; _SIMPLE_TLB_REFILL_EXCPT_ADDR = _ebase_address + _ebase_vector_offsets + 0; _GEN_EXCPT_ADDR = _ebase_address + _ebase_vector_offsets + 0x180; kseg0_program_mem (rx) : ORIGIN = 0x9D000000 + &lt;bootloader_length&gt; + 0x1000, LENGTH = 0x200000 - &lt;bootloader_length&gt; - 0x1000 kseg1_boot_mem : ORIGIN = 0xBD000000 + &lt;bootloader_length&gt;, LENGTH = 0x1000 /* Boot Sections */ .reset _RESET_ADDR : { KEEP(*(.reset)) KEEP(*(.reset.startup)) } &gt; kseg1_boot_mem ... /* Interrupt vector table with vector offsets */ .vectors _ebase_address + _ebase_vector_offsets + 0x200 : { /* Symbol __vector_offset_n points to .vector_n if it exists, * otherwise points to the default handler. The * vector_offset_init.o module then provides a .data section * containing values used to initialize the vector-offset SFRs * in the crt0 startup code. */ . = ALIGN(4) ; __vector_offset_0 = (DEFINED(__vector_dispatch_0) ? (. - _ebase_address) : __vector_offset_default); KEEP(*(.vector_0)) ..... /* Default interrupt handler */ . = ALIGN(4) ; __vector_offset_default = . - _ebase_address; KEEP(*(.vector_default)) } &gt; kseg0_program_mem . For Bootloaders placed in Program Flash Memory (PIC32MX Devices) . | The bootloader code resides from start of Program flash memory, hence the application start address has to be after the end of bootloader. | The Initial 4KB from Application start address are used by Reset Handler section . | Place the _ebase_address after the device startup code of application . | Updated linked scripts as explained above is shown here as an example. | Bootloader length &lt;bootloader_length&gt; in the below snippet needs to be replaced with size of the respective bootloader. | . | . PROVIDE(_vector_spacing = 0x0001); PROVIDE(_ebase_address = 0x9D000000 + &lt;bootloader_length&gt; + 0x1000); _RESET_ADDR = 0xBD000000 + &lt;bootloader_length&gt;; kseg0_program_mem (rx) : ORIGIN = 0x9D000000 + &lt;bootloader_length&gt; + 0x1000, LENGTH = 0x80000 - &lt;bootloader_length&gt; - 0x1000 kseg1_boot_mem : ORIGIN = 0xBD000000 + &lt;bootloader_length&gt;, LENGTH = 0x1000 /* Boot Sections */ .reset _RESET_ADDR : { KEEP(*(.reset)) KEEP(*(.reset.startup)) } &gt; kseg1_boot_mem ...vector_0 _ebase_address + 0x200 + ((_vector_spacing &lt;&lt; 5) * 0) : { KEEP(*(.vector_0)) } &gt; kseg0_program_mem ASSERT (_vector_spacing == 0 || SIZEOF(.vector_0) &lt;= (_vector_spacing &lt;&lt; 5), \"function at exception vector 0 too large\") .vector_1 _ebase_address + 0x200 + ((_vector_spacing &lt;&lt; 5) * 1) : { KEEP(*(.vector_1)) } &gt; kseg0_program_mem ASSERT (_vector_spacing == 0 || SIZEOF(.vector_1) &lt;= (_vector_spacing &lt;&lt; 5), \"function at exception vector 1 too large\") ..... Note . | The bootloader and the application must have the same device configuration bit settings. The Device configuration bit settings from the bootloader project will be updated by the programmer/debugger, Hence the application linker script should not have any device configuration bit settings. The application project will use the device configuration bit settings done by bootloader. | Device configurations and debug exception need to discarded from final hex file for the application project. | . /DISCARD/ : { *(._debug_exception) } /DISCARD/ : { *(.config_*) } . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/docs/readme_configure_application_pic32m.html#setting-up-the-application-linker-script",
    "relUrl": "/apps/docs/readme_configure_application_pic32m.html#setting-up-the-application-linker-script"
  },"27": {
    "doc": "Application Configurations for MIPS based MCUs",
    "title": "Additional settings (Optional)",
    "content": ". | Data Memory Origin and Data Memory Length values should be updated in linkerscript for reserving configured bytes from start of RAM to trigger bootloader from firmware | . /* Reserve &lt;trigger_len&gt; Bytes to Store Bootloader Trigger Pattern */ kseg0_data_mem (w!x) : ORIGIN = &lt;ram_start&gt; + &lt;trigger_len&gt;, LENGTH = &lt;ram_length&gt; - &lt;trigger_len&gt; . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/docs/readme_configure_application_pic32m.html#additional-settings-optional",
    "relUrl": "/apps/docs/readme_configure_application_pic32m.html#additional-settings-optional"
  },"28": {
    "doc": "Application Configurations for MIPS based MCUs",
    "title": "MPLAB X Settings",
    "content": ". | Specifying post build option to automatically generate the binary file from hex file once the build is complete . ${MP_CC_DIR}/xc32-objcopy -I ihex -O binary ${DISTDIR}/${PROJECTNAME}.${IMAGE_TYPE}.hex ${DISTDIR}/${PROJECTNAME}.${IMAGE_TYPE}.bin . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/docs/readme_configure_application_pic32m.html#mplab-x-settings",
    "relUrl": "/apps/docs/readme_configure_application_pic32m.html#mplab-x-settings"
  },"29": {
    "doc": "Application Configurations for MIPS based MCUs",
    "title": "Application Configurations for MIPS based MCUs",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/docs/readme_configure_application_pic32m.html",
    "relUrl": "/apps/docs/readme_configure_application_pic32m.html"
  },"30": {
    "doc": "Application Configurations for CORTEX-M based MCUs",
    "title": "Configuring an application to be bootloaded for CORTEX-M based MCUs",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/docs/readme_configure_application_sam.html#configuring-an-application-to-be-bootloaded-for-cortex-m-based-mcus",
    "relUrl": "/apps/docs/readme_configure_application_sam.html#configuring-an-application-to-be-bootloaded-for-cortex-m-based-mcus"
  },"31": {
    "doc": "Application Configurations for CORTEX-M based MCUs",
    "title": "Application settings in MCC system configuration",
    "content": ". | Launch MCC for the application project to be configured | Select system component from the project graph and configure the below highlighted settings . | Disable Fuse Settings: . | Fuse settings needs to be disabled for the application which will be boot-loaded as the fuse settings are supposed to be programmed through programming tool from bootloader code. Also the fuse settings are not programmable through firmware . | Enabling the fuse settings also increases the size of the binary when generated through the hex file . | When updating the bootloader itself, make sure that the fuse settings for the bootloader application are also disabled . | . | Specify the Application Start Address: . | Specify the Start address from where the application will run under the Application Start Address (Hex) option in System block in MCC. | This value should be equal to or greater than the bootloader size and must be aligned to the erase unit size on that device. | As this value will be used by bootloader to Jump to application at device reset it should match the value provided to bootloader code . | The Application Start Address (Hex) will be used to generate XC32 compiler settings to place the code at intended address . | After the project is regenerated, the ROM_ORIGIN and ROM_LENGTH are the XC32 linker variables which will be overridden with value provided for Application Start Address (Hex) and can be verified under Options for xc32-ld in Project Properties in MPLABX IDE as shown below. | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/docs/readme_configure_application_sam.html#application-settings-in-mcc-system-configuration",
    "relUrl": "/apps/docs/readme_configure_application_sam.html#application-settings-in-mcc-system-configuration"
  },"32": {
    "doc": "Application Configurations for CORTEX-M based MCUs",
    "title": "MPLAB X Settings",
    "content": ". | Specifying post build option to automatically generate the binary file from hex file once the build is complete . ${MP_CC_DIR}/xc32-objcopy -I ihex -O binary ${DISTDIR}/${PROJECTNAME}.${IMAGE_TYPE}.hex ${DISTDIR}/${PROJECTNAME}.${IMAGE_TYPE}.bin . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/docs/readme_configure_application_sam.html#mplab-x-settings",
    "relUrl": "/apps/docs/readme_configure_application_sam.html#mplab-x-settings"
  },"33": {
    "doc": "Application Configurations for CORTEX-M based MCUs",
    "title": "Additional settings (Optional)",
    "content": ". | RAM_ORIGIN and RAM_LENGTH values should be provided for reserving configured bytes from start of RAM to trigger bootloader from firmware . | Under Project Properties, expand options for xc32-ld and define the values for RAM_ORIGIN and RAM_LENGTH under Additional options . | This is optional and can be ignored if not required . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/docs/readme_configure_application_sam.html#additional-settings-optional",
    "relUrl": "/apps/docs/readme_configure_application_sam.html#additional-settings-optional"
  },"34": {
    "doc": "Application Configurations for CORTEX-M based MCUs",
    "title": "Application Configurations for CORTEX-M based MCUs",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/docs/readme_configure_application_sam.html",
    "relUrl": "/apps/docs/readme_configure_application_sam.html"
  },"35": {
    "doc": "Building and Running on PIC32MM USB Curiosity board",
    "title": "Building and Running the SPI EEPROM Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_eeprom_bootloader/docs/readme_pic32mm_usb_curiosity.html#building-and-running-the-spi-eeprom-bootloader-applications",
    "relUrl": "/apps/spi_eeprom_bootloader/docs/readme_pic32mm_usb_curiosity.html#building-and-running-the-spi-eeprom-bootloader-applications"
  },"36": {
    "doc": "Building and Running on PIC32MM USB Curiosity board",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/spi_eeprom_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32mm_usb_cur.X | MPLABX Project for PIC32MM USB Curiosity board | . Programmer application . | Project Name | Description | . | app_programmer/firmware/pic32mm_usb_cur.X | MPLABX Project for PIC32MM USB Curiosity board | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_eeprom_bootloader/docs/readme_pic32mm_usb_curiosity.html#downloading-and-building-the-application",
    "relUrl": "/apps/spi_eeprom_bootloader/docs/readme_pic32mm_usb_curiosity.html#downloading-and-building-the-application"
  },"37": {
    "doc": "Building and Running on PIC32MM USB Curiosity board",
    "title": "Setting up PIC32MM USB Curiosity board",
    "content": ". | To run the demo, the following additional hardware are required: . | USB UART click board | EEPROM 4 Click board | . | Connect micro USB cable to the ‘USB1’ connector on the board to the computer | Install an EEPROM 4 Click board into the MikroBus socket J12 | Install an USB UART click board into the mikroBUS socket J4 | Connect mini USB cable between PC and the USB UART click board . | Note: Ensure that the series resistors on the mikroBUS headers are of value 0 Ohms | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_eeprom_bootloader/docs/readme_pic32mm_usb_curiosity.html#setting-up-pic32mm-usb-curiosity-board",
    "relUrl": "/apps/spi_eeprom_bootloader/docs/readme_pic32mm_usb_curiosity.html#setting-up-pic32mm-usb-curiosity-board"
  },"38": {
    "doc": "Building and Running on PIC32MM USB Curiosity board",
    "title": "Setting up the host script",
    "content": ". | Refer to UART Host Script Help for setting up the uart_host.py utility used to send the application binary from host PC . | There will be no reset command sent from host after programming by default. | Reboot command has to be sent separately only after successful programming to trigger bootloader from programmer application . | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_eeprom_bootloader/docs/readme_pic32mm_usb_curiosity.html#setting-up-the-host-script",
    "relUrl": "/apps/spi_eeprom_bootloader/docs/readme_pic32mm_usb_curiosity.html#setting-up-the-host-script"
  },"39": {
    "doc": "Building and Running on PIC32MM USB Curiosity board",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/pic32mm_usb_cur.X in the IDE . | Make sure that the app_programmer/firmware/pic32mm_usb_cur.X is added as a loadable project to bootloader application . | As the SPI EEPROM may not have any valid binary required by bootloader for the first time, Adding the app_programmer as loadable allows MPLAB X to create a unified hex file and program both these applications in their respective memory locations based on their linker script configurations | . | Build and program the bootloader application using the IDE . | Once programming is done bootloader starts execution and directly jumps to application space to run the programmer application . | LED1 starts blinking every 500ms indicating that the programmer application is running | . | Open the programmer application project app_programmer/firmware/pic32mm_usb_cur.X in the IDE . | Update app_programmer/firmware/src/app.c to reduce the LED blink duration from 500ms to 100ms as below . APP_TIMER_DelayMs(100); . | Clean and Build the project to generate the binary (Do not program the binary) . | Run the uart_host.py from command prompt to program the updated programmer application binary in SPI EEPROM . python &lt;harmony3_path&gt;/bootloader_apps_serial_memory/tools/uart_host.py -v -i &lt;COM PORT&gt; -d pic32mm -a 0x9D002000 -f &lt;harmony3_path&gt;/bootloader_apps_serial_memory/apps/spi_eeprom_bootloader/app_programmer/firmware/pic32mm_usb_cur.X/dist/pic32mm_usb_cur/production/pic32mm_usb_cur.X.production.bin . | Following snapshot shows output of successfully programming the programmer application . | LED1 should still be blinking every 500ms | . | Run the uart_host.py from command prompt to send a Reboot command. This command Updates MetaData and triggers Bootloader to program the updated binary from SPI EEPROM to Internal Flash . python &lt;harmony3_path&gt;/bootloader_apps_serial_memory/tools/uart_host.py -v -i &lt;COM PORT&gt; -r . | Once Firmware Update is successful LED1 should start blinking every 100ms indicating updated programmer application running . | If there was any error you may need to power cycle the device to retry firmware upgrade | . | Update app_programmer/firmware/src/app.c to revert LED blink duration to 500ms from 100ms as below . APP_TIMER_DelayMs(500); . | Clean and Build the project to generate the binary (Do not program the binary) . | Repeat Step 8-9. | You should see LED1 still blinking every 100ms | . | Press the Switch S1 to Update MetaData and trigger Bootloader to program the updated binary from SPI EEPROM to Internal Flash . | Once Firmware Update is successful LED1 should start blinking every 500ms indicating updated programmer application running . | If there was any error you may need to power cycle the device to retry firmware upgrade | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_eeprom_bootloader/docs/readme_pic32mm_usb_curiosity.html#running-the-application",
    "relUrl": "/apps/spi_eeprom_bootloader/docs/readme_pic32mm_usb_curiosity.html#running-the-application"
  },"40": {
    "doc": "Building and Running on PIC32MM USB Curiosity board",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Note that this application should have programming capabilities to SPI EEPROM | . | Once done repeat the applicable steps mentioned in Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_eeprom_bootloader/docs/readme_pic32mm_usb_curiosity.html#additional-steps-optional",
    "relUrl": "/apps/spi_eeprom_bootloader/docs/readme_pic32mm_usb_curiosity.html#additional-steps-optional"
  },"41": {
    "doc": "Building and Running on PIC32MM USB Curiosity board",
    "title": "Building and Running on PIC32MM USB Curiosity board",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_eeprom_bootloader/docs/readme_pic32mm_usb_curiosity.html",
    "relUrl": "/apps/spi_eeprom_bootloader/docs/readme_pic32mm_usb_curiosity.html"
  },"42": {
    "doc": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "title": "Building and Running the QSPI Flash Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_pic32mz_das_sk.html#building-and-running-the-qspi-flash-bootloader-applications",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_pic32mz_das_sk.html#building-and-running-the-qspi-flash-bootloader-applications"
  },"43": {
    "doc": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/qspi_flash_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32mz_das_sk.X | MPLABX Project for PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) | . Programmer application . | Project Name | Description | . | app_programmer/firmware/pic32mz_das_sk.X | MPLABX Project for PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_pic32mz_das_sk.html#downloading-and-building-the-application",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_pic32mz_das_sk.html#downloading-and-building-the-application"
  },"44": {
    "doc": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "title": "Setting up PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "content": ". | Connect a micro USB cable to the UART-USB port J5 | For programming, connect a micro USB cable to the USB Debug port J19 | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_pic32mz_das_sk.html#setting-up-pic32mz-embedded-graphics-with-stacked-dram-da-starter-kit-crypto",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_pic32mz_das_sk.html#setting-up-pic32mz-embedded-graphics-with-stacked-dram-da-starter-kit-crypto"
  },"45": {
    "doc": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "title": "Setting up the host script",
    "content": ". | Refer to UART Host Script Help for setting up the uart_host.py utility used to send the application binary from host PC . | There will be no reset command sent from host after programming by default. | Reboot command has to be sent separately only after successful programming to trigger bootloader from programmer application . | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_pic32mz_das_sk.html#setting-up-the-host-script",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_pic32mz_das_sk.html#setting-up-the-host-script"
  },"46": {
    "doc": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/pic32mz_das_sk.X in the IDE . | Make sure that the app_programmer/firmware/pic32mz_das_sk.X is added as a loadable project to bootloader application . | As the QSPI Flash memory may not have any valid binary required by bootloader for the first time, Adding the app_programmer as loadable allows MPLAB X to create a unified hex file and program both these applications in their respective memory locations based on their linker script configurations | . | Build and program the bootloader application using the IDE . | Once programming is done bootloader starts execution and directly jumps to application space to run the programmer application . | LED3 starts blinking indicating that the programmer application is running | . | Open the programmer application project app_programmer/firmware/pic32mz_das_sk.X in the IDE . | Update app_programmer/firmware/src/config/pic32mz_das_sk/user.h to use LED2 instead of LED3 as below . #define LED_TOGGLE() LED2_Toggle() . | Clean and Build the project to generate the binary (Do not program the binary) . | Run the uart_host.py from command prompt to program the updated programmer application binary in QSPI Flash memory . python &lt;harmony3_path&gt;/bootloader_apps_serial_memory/tools/uart_host.py -v -i &lt;COM PORT&gt; -d pic32mz -a 0x9D000000 -f &lt;harmony3_path&gt;/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/app_programmer/firmware/pic32mz_das_sk.X/dist/pic32mz_das_sk/production/pic32mz_das_sk.X.production.bin . | Following snapshot shows output of successfully programming the programmer application . | LED3 should still be blinking | . | Run the uart_host.py from command prompt to send a Reboot command. This command Updates MetaData and triggers Bootloader to program the updated binary from QSPI Flash to Internal Flash . python &lt;harmony3_path&gt;/bootloader_apps_serial_memory/tools/uart_host.py -v -i &lt;COM PORT&gt; -r . | Once Firmware Update is successful LED2 should start blinking indicating updated programmer application running . | If there was any error you may need to power cycle the device to retry firmware upgrade | . | Update app_programmer/firmware/src/config/pic32mz_das_sk/user.h to revert to LED3 from LED2 as below . #define LED_TOGGLE() LED3_Toggle() . | Clean and Build the project to generate the binary (Do not program the binary) . | Repeat Step 8-9. | You should see LED2 still blinking | . | Press the Switch SW1 to Update MetaData and trigger Bootloader to program the updated binary from QSPI Flash to Internal Flash . | Once Firmware Update is successful LED3 should start blinking indicating updated programmer application running . | If there was any error you may need to power cycle the device to retry firmware upgrade | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_pic32mz_das_sk.html#running-the-application",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_pic32mz_das_sk.html#running-the-application"
  },"47": {
    "doc": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Note that this application should have programming capabilities to QSPI Flash Memory | . | Once done repeat the applicable steps mentioned in Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_pic32mz_das_sk.html#additional-steps-optional",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_pic32mz_das_sk.html#additional-steps-optional"
  },"48": {
    "doc": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "title": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_pic32mz_das_sk.html",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_pic32mz_das_sk.html"
  },"49": {
    "doc": "Building and Running on Curiosity PIC32MZ EF 2.0 Development Board",
    "title": "Building and Running the File System based QSPI Flash Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/qspi/docs/readme_pic32mz_ef_curiosity_v2.html#building-and-running-the-file-system-based-qspi-flash-bootloader-applications",
    "relUrl": "/apps/fs/qspi/docs/readme_pic32mz_ef_curiosity_v2.html#building-and-running-the-file-system-based-qspi-flash-bootloader-applications"
  },"50": {
    "doc": "Building and Running on Curiosity PIC32MZ EF 2.0 Development Board",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/fs/qspi/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32mz_ef_curiosity_v2.X | MPLABX Project for Curiosity PIC32MZ EF 2.0 Development Board | . Programmer application . | Project Name | Description | . | app_programmer/firmware/pic32mz_ef_curiosity_v2.X | MPLABX Project for Curiosity PIC32MZ EF 2.0 Development Board | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/qspi/docs/readme_pic32mz_ef_curiosity_v2.html#downloading-and-building-the-application",
    "relUrl": "/apps/fs/qspi/docs/readme_pic32mz_ef_curiosity_v2.html#downloading-and-building-the-application"
  },"51": {
    "doc": "Building and Running on Curiosity PIC32MZ EF 2.0 Development Board",
    "title": "Setting up Curiosity PIC32MZ EF 2.0 Development Board",
    "content": ". | To run the demo, the following additional hardware are required: . | One microSD click . | One micro SD Card . | . | Install the microSD click on to the mikroBUS 1 Header of the device . | For programming and UART Console, connect a micro USB cable to the USB Debug port J700 | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/qspi/docs/readme_pic32mz_ef_curiosity_v2.html#setting-up-curiosity-pic32mz-ef-20-development-board",
    "relUrl": "/apps/fs/qspi/docs/readme_pic32mz_ef_curiosity_v2.html#setting-up-curiosity-pic32mz-ef-20-development-board"
  },"52": {
    "doc": "Building and Running on Curiosity PIC32MZ EF 2.0 Development Board",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/pic32mz_ef_curiosity_v2.X in the IDE . | Make sure that the app_programmer/firmware/pic32mz_ef_curiosity_v2.X is added as a loadable project to bootloader application . | As the QSPI Flash memory may not have any valid binary required by bootloader for the first time, Adding the app_programmer as loadable allows MPLAB X to create a unified hex file and program both these applications in their respective memory locations based on their linker script configurations | . | Open the Terminal application (Ex.:Tera Term) on the computer to get programmer application messages through UART once loaded | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and program the bootloader application using the IDE . | Once programming is done bootloader starts execution and directly jumps to application space to run the programmer application . | LED3 starts blinking indicating that the programmer application is running and you should see below output on the console . | . | Open the programmer application project app_programmer/firmware/pic32mz_ef_curiosity_v2.X in the IDE . | Update app_programmer/firmware/src/app_monitor.c to update printf message from Serial Memory to QSPI Flash Memory as below . printf(\"\\r\\n###### File System (QSPI Flash Memory) Programmer Application Running ######\\r\\n\"); . | Clean and Build the project to generate the binary (Do not program the binary) . | Copy the generated application binary file to a sdcard from the Host PC . | &lt;harmony3_path&gt;/bootloader_apps_serial_memory/apps/fs/qspi/app_programmer/firmware/pic32mz_ef_curiosity_v2.X/dist/pic32mz_ef_curiosity_v2/production/pic32mz_ef_curiosity_v2.X.production.bin | . | Rename the copied application binary file to image.bin . | Insert the sdcard with the application binary image.bin to the sdcard slot on the microSD click . | Following snapshot shows output of successfully copying the programmer application binary to QSPI Flash Memory . | LED3 should still be blinking . | . | Remove the sdcard from the sdcard slot . | Press and hold the Switch SW1 to trigger Bootloader from programmer application and you should see below output . | Once Firmware Update is successful LED3 should start blinking indicating updated programmer application running and you should see below output on the console . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/qspi/docs/readme_pic32mz_ef_curiosity_v2.html#running-the-application",
    "relUrl": "/apps/fs/qspi/docs/readme_pic32mz_ef_curiosity_v2.html#running-the-application"
  },"53": {
    "doc": "Building and Running on Curiosity PIC32MZ EF 2.0 Development Board",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Note that this application should have programming capabilities to QSPI Flash Memory | . | Once done repeat the applicable steps mentioned in Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/qspi/docs/readme_pic32mz_ef_curiosity_v2.html#additional-steps-optional",
    "relUrl": "/apps/fs/qspi/docs/readme_pic32mz_ef_curiosity_v2.html#additional-steps-optional"
  },"54": {
    "doc": "Building and Running on Curiosity PIC32MZ EF 2.0 Development Board",
    "title": "Building and Running on Curiosity PIC32MZ EF 2.0 Development Board",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/qspi/docs/readme_pic32mz_ef_curiosity_v2.html",
    "relUrl": "/apps/fs/qspi/docs/readme_pic32mz_ef_curiosity_v2.html"
  },"55": {
    "doc": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "Building and Running the QSPI Flash Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_pic32mz_ef_sk.html#building-and-running-the-qspi-flash-bootloader-applications",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_pic32mz_ef_sk.html#building-and-running-the-qspi-flash-bootloader-applications"
  },"56": {
    "doc": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/qspi_flash_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32mz_ef_sk.X | MPLABX project for PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . Programmer application . | Project Name | Description | . | app_programmer/firmware/pic32mz_ef_sk.X | MPLABX project for PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_pic32mz_ef_sk.html#downloading-and-building-the-application",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_pic32mz_ef_sk.html#downloading-and-building-the-application"
  },"57": {
    "doc": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "Setting up PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "content": ". | Connect a mini USB cable to the UART-USB port J11 . | For programming, connect a mini USB cable to the USB Debug port J3 . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_pic32mz_ef_sk.html#setting-up-pic32mz-embedded-connectivity-with-fpu-ef-starter-kit",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_pic32mz_ef_sk.html#setting-up-pic32mz-embedded-connectivity-with-fpu-ef-starter-kit"
  },"58": {
    "doc": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to UART Host Script Help for setting up the uart_host.py utility used to send the application binary from host PC . | There will be no reset command sent from host after programming by default. | Reboot command has to be sent separately only after successful programming to trigger bootloader from programmer application . | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_pic32mz_ef_sk.html#setting-up-the-host-script",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_pic32mz_ef_sk.html#setting-up-the-host-script"
  },"59": {
    "doc": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/pic32mz_ef_sk.X in the IDE . | Make sure that the app_programmer/firmware/pic32mz_ef_sk.X is added as a loadable project to bootloader application . | As the QSPI Flash memory may not have any valid binary required by bootloader for the first time, Adding the app_programmer as loadable allows MPLAB X to create a unified hex file and program both these applications in their respective memory locations based on their linker script configurations | . | Build and program the bootloader application using the IDE . | Once programming is done bootloader starts execution and directly jumps to application space to run the programmer application . | LED3 starts blinking indicating that the programmer application is running | . | Open the programmer application project app_programmer/firmware/pic32mz_ef_sk.X in the IDE . | Update app_programmer/firmware/src/config/pic32mz_ef_sk/user.h to use LED2 instead of LED3 as below . #define LED_TOGGLE() LED2_Toggle() . | Clean and Build the project to generate the binary (Do not program the binary) . | Run the uart_host.py from command prompt to program the updated programmer application binary in QSPI Flash memory . python &lt;harmony3_path&gt;/bootloader_apps_serial_memory/tools/uart_host.py -v -i &lt;COM PORT&gt; -d pic32mz -a 0x9D000000 -f &lt;harmony3_path&gt;/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/app_programmer/firmware/pic32mz_ef_sk.X/dist/pic32mz_ef_sk/production/pic32mz_ef_sk.X.production.bin . | Following snapshot shows output of successfully programming the programmer application . | LED3 should still be blinking | . | Run the uart_host.py from command prompt to send a Reboot command. This command Updates MetaData and triggers Bootloader to program the updated binary from QSPI Flash to Internal Flash . python &lt;harmony3_path&gt;/bootloader_apps_serial_memory/tools/uart_host.py -v -i &lt;COM PORT&gt; -r . | Once Firmware Update is successful LED2 should start blinking indicating updated programmer application running . | If there was any error you may need to power cycle the device to retry firmware upgrade | . | Update app_programmer/firmware/src/config/pic32mz_ef_sk/user.h to revert to LED3 from LED2 as below . #define LED_TOGGLE() LED3_Toggle() . | Clean and Build the project to generate the binary (Do not program the binary) . | Repeat Step 8-9. | You should see LED2 still blinking | . | Press the Switch SW1 to Update MetaData and trigger Bootloader to program the updated binary from QSPI Flash to Internal Flash . | Once Firmware Update is successful LED3 should start blinking indicating updated programmer application running . | If there was any error you may need to power cycle the device to retry firmware upgrade | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_pic32mz_ef_sk.html#running-the-application",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_pic32mz_ef_sk.html#running-the-application"
  },"60": {
    "doc": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Note that this application should have programming capabilities to QSPI Flash Memory | . | Once done repeat the applicable steps mentioned in Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_pic32mz_ef_sk.html#additional-steps-optional",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_pic32mz_ef_sk.html#additional-steps-optional"
  },"61": {
    "doc": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_pic32mz_ef_sk.html",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_pic32mz_ef_sk.html"
  },"62": {
    "doc": "Building and Running on PIC32 WFI32E Curiosity Board",
    "title": "Building and Running the SPI Flash Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_flash_bootloader/docs/readme_pic32mz_w1_curiosity.html#building-and-running-the-spi-flash-bootloader-applications",
    "relUrl": "/apps/spi_flash_bootloader/docs/readme_pic32mz_w1_curiosity.html#building-and-running-the-spi-flash-bootloader-applications"
  },"63": {
    "doc": "Building and Running on PIC32 WFI32E Curiosity Board",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/spi_flash_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32mz_w1_curiosity.X | MPLABX Project for PIC32 WFI32E Curiosity Board | . Programmer application . | Project Name | Description | . | app_programmer/firmware/pic32mz_w1_curiosity.X | MPLABX Project for PIC32 WFI32E Curiosity Board | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_flash_bootloader/docs/readme_pic32mz_w1_curiosity.html#downloading-and-building-the-application",
    "relUrl": "/apps/spi_flash_bootloader/docs/readme_pic32mz_w1_curiosity.html#downloading-and-building-the-application"
  },"64": {
    "doc": "Building and Running on PIC32 WFI32E Curiosity Board",
    "title": "Setting up PIC32 WFI32E Curiosity Board",
    "content": ". | Connect the Debug USB port on the board to the computer using a micro USB cable . | On the GPIO Header (J207), connect U1RX (PIN 13) and U1TX (PIN 23) to TX and RX pin of any USB to UART converter (for eg: USB UART click board) . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_flash_bootloader/docs/readme_pic32mz_w1_curiosity.html#setting-up-pic32-wfi32e-curiosity-board",
    "relUrl": "/apps/spi_flash_bootloader/docs/readme_pic32mz_w1_curiosity.html#setting-up-pic32-wfi32e-curiosity-board"
  },"65": {
    "doc": "Building and Running on PIC32 WFI32E Curiosity Board",
    "title": "Setting up the host script",
    "content": ". | Refer to UART Host Script Help for setting up the uart_host.py utility used to send the application binary from host PC . | There will be no reset command sent from host after programming by default. | Reboot command has to be sent separately only after successful programming to trigger bootloader from programmer application . | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_flash_bootloader/docs/readme_pic32mz_w1_curiosity.html#setting-up-the-host-script",
    "relUrl": "/apps/spi_flash_bootloader/docs/readme_pic32mz_w1_curiosity.html#setting-up-the-host-script"
  },"66": {
    "doc": "Building and Running on PIC32 WFI32E Curiosity Board",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/pic32mz_w1_curiosity.X in the IDE . | Make sure that the app_programmer/firmware/pic32mz_w1_curiosity.X is added as a loadable project to bootloader application . | As the SPI Flash memory may not have any valid binary required by bootloader for the first time, Adding the app_programmer as loadable allows MPLAB X to create a unified hex file and program both these applications in their respective memory locations based on their linker script configurations | . | Build and program the bootloader application using the IDE . | Once programming is done bootloader starts execution and directly jumps to application space to run the programmer application . | RED LED (D202) starts blinking indicating that the programmer application is running | . | Open the programmer application project app_programmer/firmware/pic32mz_w1_curiosity.X in the IDE . | Update app_programmer/firmware/src/config/pic32mz_w1_curiosity/user.h to use GREEN LED (D204) instead of RED LED (D202) as below . #define LED_TOGGLE() LED_GREEN_Toggle() . | Clean and Build the project to generate the binary (Do not program the binary) . | Run the uart_host.py from command prompt to program the updated programmer application binary in SPI Flash memory . python &lt;harmony3_path&gt;/bootloader_apps_serial_memory/tools/uart_host.py -v -i &lt;COM PORT&gt; -d pic32mzw -a 0x90000000 -f &lt;harmony3_path&gt;/bootloader_apps_serial_memory/apps/spi_flash_bootloader/app_programmer/firmware/pic32mz_w1_curiosity.X/dist/pic32mz_w1_curiosity/production/pic32mz_w1_curiosity.X.production.bin . | Following snapshot shows output of successfully programming the programmer application . | RED LED (D202) should still be blinking | . | Run the uart_host.py from command prompt to send a Reboot command. This command Updates MetaData and triggers Bootloader to program the updated binary from SPI Flash to Internal Flash . python &lt;harmony3_path&gt;/bootloader_apps_serial_memory/tools/uart_host.py -v -i &lt;COM PORT&gt; -r . | Once Firmware Update is successful GREEN LED (D204) should start blinking indicating updated programmer application running . | If there was any error you may need to power cycle the device to retry firmware upgrade | . | Update app_programmer/firmware/src/config/pic32mz_w1_curiosity/user.h to revert to RED LED (D202) from GREEN LED (D204) as below . #define LED_TOGGLE() LED_RED_Toggle() . | Clean and Build the project to generate the binary (Do not program the binary) . | Repeat Step 8-9. | You should see GREEN LED (D204) still blinking | . | Press the Switch SW1/SW200 to Update MetaData and trigger Bootloader to program the updated binary from SPI Flash to Internal Flash . | Once Firmware Update is successful RED LED (D202) should start blinking indicating updated programmer application running . | If there was any error you may need to power cycle the device to retry firmware upgrade | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_flash_bootloader/docs/readme_pic32mz_w1_curiosity.html#running-the-application",
    "relUrl": "/apps/spi_flash_bootloader/docs/readme_pic32mz_w1_curiosity.html#running-the-application"
  },"67": {
    "doc": "Building and Running on PIC32 WFI32E Curiosity Board",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Note that this application should have programming capabilities to SPI Flash Memory | . | Once done repeat the applicable steps mentioned in Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_flash_bootloader/docs/readme_pic32mz_w1_curiosity.html#additional-steps-optional",
    "relUrl": "/apps/spi_flash_bootloader/docs/readme_pic32mz_w1_curiosity.html#additional-steps-optional"
  },"68": {
    "doc": "Building and Running on PIC32 WFI32E Curiosity Board",
    "title": "Building and Running on PIC32 WFI32E Curiosity Board",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_flash_bootloader/docs/readme_pic32mz_w1_curiosity.html",
    "relUrl": "/apps/spi_flash_bootloader/docs/readme_pic32mz_w1_curiosity.html"
  },"69": {
    "doc": "Building and Running on PIC32 WFI32E Curiosity Board",
    "title": "Building and Running the File System based SPI Flash Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/spi/docs/readme_pic32mz_w1_curiosity.html#building-and-running-the-file-system-based-spi-flash-bootloader-applications",
    "relUrl": "/apps/fs/spi/docs/readme_pic32mz_w1_curiosity.html#building-and-running-the-file-system-based-spi-flash-bootloader-applications"
  },"70": {
    "doc": "Building and Running on PIC32 WFI32E Curiosity Board",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/fs/spi/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32mz_w1_curiosity.X | MPLABX Project for PIC32 WFI32E Curiosity Board | . Programmer application . | Project Name | Description | . | app_programmer/firmware/pic32mz_w1_curiosity.X | MPLABX Project for PIC32 WFI32E Curiosity Board | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/spi/docs/readme_pic32mz_w1_curiosity.html#downloading-and-building-the-application",
    "relUrl": "/apps/fs/spi/docs/readme_pic32mz_w1_curiosity.html#downloading-and-building-the-application"
  },"71": {
    "doc": "Building and Running on PIC32 WFI32E Curiosity Board",
    "title": "Setting up PIC32 WFI32E Curiosity Board",
    "content": ". | To run the demo, the following additional hardware are required: . | One IO1 Xplained Pro Extension Kit . | One micro SD Card . | . | Connect IO1 Xplained Pro Extension Kit to the J203 XPRO header of PIC32 WFI32E Curiosity Board . | On the GPIO Header (J207), connect U1RX (PIN 13) and U1TX (PIN 23) to TX and RX pin of any USB to UART converter (for eg: USB UART click board) . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/spi/docs/readme_pic32mz_w1_curiosity.html#setting-up-pic32-wfi32e-curiosity-board",
    "relUrl": "/apps/fs/spi/docs/readme_pic32mz_w1_curiosity.html#setting-up-pic32-wfi32e-curiosity-board"
  },"72": {
    "doc": "Building and Running on PIC32 WFI32E Curiosity Board",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/pic32mz_w1_curiosity.X in the IDE . | Make sure that the app_programmer/firmware/pic32mz_w1_curiosity.X is added as a loadable project to bootloader application . | As the SPI Flash memory may not have any valid binary required by bootloader for the first time, Adding the app_programmer as loadable allows MPLAB X to create a unified hex file and program both these applications in their respective memory locations based on their linker script configurations | . | Open the Terminal application (Ex.:Tera Term) on the computer to get programmer application messages through UART once loaded | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and program the bootloader application using the IDE . | Once programming is done bootloader starts execution and directly jumps to application space to run the programmer application . | RED LED (D202) starts blinking indicating that the programmer application is running and you should see below output on the console . | . | Open the programmer application project app_programmer/firmware/pic32mz_w1_curiosity.X in the IDE . | Update app_programmer/firmware/src/app_monitor.c to update printf message from Serial Memory to SPI Flash Memory as below . printf(\"\\r\\n###### File System (SPI Flash Memory) Programmer Application Running ######\\r\\n\"); . | Clean and Build the project to generate the binary (Do not program the binary) . | Copy the generated application binary file to a sdcard from the Host PC . | &lt;harmony3_path&gt;/bootloader_apps_serial_memory/apps/fs/spi/app_programmer/firmware/pic32mz_w1_curiosity.X/dist/pic32mz_w1_curiosity/production/pic32mz_w1_curiosity.X.production.bin | . | Rename the copied application binary file to image.bin . | Insert the sdcard with the application binary image.bin in the micro-SD Card slot of the IO1 Xplained Pro Extension Kit . | Following snapshot shows output of successfully copying the programmer application binary to SPI Flash Memory . | RED LED (D202) should still be blinking . | . | Remove the sdcard from the sdcard slot . | Press and hold the Switch SW1/SW200 to trigger Bootloader from programmer application and you should see below output . | Once Firmware Update is successful RED LED (D202) should start blinking indicating updated programmer application running and you should see below output on the console . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/spi/docs/readme_pic32mz_w1_curiosity.html#running-the-application",
    "relUrl": "/apps/fs/spi/docs/readme_pic32mz_w1_curiosity.html#running-the-application"
  },"73": {
    "doc": "Building and Running on PIC32 WFI32E Curiosity Board",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Note that this application should have programming capabilities to SPI Flash Memory | . | Once done repeat the applicable steps mentioned in Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/spi/docs/readme_pic32mz_w1_curiosity.html#additional-steps-optional",
    "relUrl": "/apps/fs/spi/docs/readme_pic32mz_w1_curiosity.html#additional-steps-optional"
  },"74": {
    "doc": "Building and Running on PIC32 WFI32E Curiosity Board",
    "title": "Building and Running on PIC32 WFI32E Curiosity Board",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/spi/docs/readme_pic32mz_w1_curiosity.html",
    "relUrl": "/apps/fs/spi/docs/readme_pic32mz_w1_curiosity.html"
  },"75": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Building and Running the I2C EEPROM Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/i2c_eeprom_bootloader/docs/readme_sam_d21_xpro.html#building-and-running-the-i2c-eeprom-bootloader-applications",
    "relUrl": "/apps/i2c_eeprom_bootloader/docs/readme_sam_d21_xpro.html#building-and-running-the-i2c-eeprom-bootloader-applications"
  },"76": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/i2c_eeprom_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_d21_xpro.X | MPLABX Project for SAM D21 Xplained Pro Evaluation Kit | . Programmer application . | Project Name | Description | . | app_programmer/firmware/sam_d21_xpro.X | MPLABX Project for SAM D21 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/i2c_eeprom_bootloader/docs/readme_sam_d21_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c_eeprom_bootloader/docs/readme_sam_d21_xpro.html#downloading-and-building-the-application"
  },"77": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM D21 Xplained Pro Evaluation Kit",
    "content": ". | To run the demo, the following additional hardware are required: . | One EEPROM 3 Click board . | One mikroBUS Xplained Pro board . | . | Install the EEPROM 3 Click on to the mikroBUS Xplained Pro board . | Connect mikroBUS Xplained Pro board to the EXT2 header . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/i2c_eeprom_bootloader/docs/readme_sam_d21_xpro.html#setting-up-sam-d21-xplained-pro-evaluation-kit",
    "relUrl": "/apps/i2c_eeprom_bootloader/docs/readme_sam_d21_xpro.html#setting-up-sam-d21-xplained-pro-evaluation-kit"
  },"78": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to UART Host Script Help for setting up the uart_host.py utility used to send the application binary from host PC . | There will be no reset command sent from host after programming by default. | Reboot command has to be sent separately only after successful programming to trigger bootloader from programmer application . | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/i2c_eeprom_bootloader/docs/readme_sam_d21_xpro.html#setting-up-the-host-script",
    "relUrl": "/apps/i2c_eeprom_bootloader/docs/readme_sam_d21_xpro.html#setting-up-the-host-script"
  },"79": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/sam_d21_xpro.X in the IDE . | Make sure that the app_programmer/firmware/sam_d21_xpro.X is added as a loadable project to bootloader application . | As the I2C EEPROM may not have any valid binary required by bootloader for the first time, Adding the app_programmer as loadable allows MPLAB X to create a unified hex file and program both these applications in their respective memory locations based on their linker script configurations | . | Build and program the bootloader application using the IDE . | Once programming is done bootloader starts execution and directly jumps to application space to run the programmer application . | LED0 starts blinking every 500ms indicating that the programmer application is running | . | Open the programmer application project app_programmer/firmware/sam_d21_xpro.X in the IDE . | Update app_programmer/firmware/src/app.c to reduce the LED blink duration from 500ms to 100ms as below . APP_TIMER_DelayMs(100); . | Clean and Build the project to generate the binary (Do not program the binary) . | Run the uart_host.py from command prompt to program the updated programmer application binary in I2C EEPROM . python &lt;harmony3_path&gt;/bootloader_apps_serial_memory/tools/uart_host.py -v -i &lt;COM PORT&gt; -d samd2x -a 0x2000 -f &lt;harmony3_path&gt;/bootloader_apps_serial_memory/apps/i2c_eeprom_bootloader/app_programmer/firmware/sam_d21_xpro.X/dist/sam_d21_xpro/production/sam_d21_xpro.X.production.bin . | Following snapshot shows output of successfully programming the programmer application . | LED0 should still be blinking every 500ms | . | Run the uart_host.py from command prompt to send a Reboot command. This command Updates MetaData and triggers Bootloader to program the updated binary from I2C EEPROM to Internal Flash . python &lt;harmony3_path&gt;/bootloader_apps_serial_memory/tools/uart_host.py -v -i &lt;COM PORT&gt; -r . | Once Firmware Update is successful LED0 should start blinking every 100ms indicating updated programmer application running . | If there was any error you may need to power cycle the device to retry firmware upgrade | . | Update app_programmer/firmware/src/app.c to revert LED blink duration to 500ms from 100ms as below . APP_TIMER_DelayMs(500); . | Clean and Build the project to generate the binary (Do not program the binary) . | Repeat Step 8-9. | You should see LED0 still blinking every 100ms | . | Press the Switch SW0 to Update MetaData and trigger Bootloader to program the updated binary from I2C EEPROM to Internal Flash . | Once Firmware Update is successful LED0 should start blinking every 500ms indicating updated programmer application running . | If there was any error you may need to power cycle the device to retry firmware upgrade | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/i2c_eeprom_bootloader/docs/readme_sam_d21_xpro.html#running-the-application",
    "relUrl": "/apps/i2c_eeprom_bootloader/docs/readme_sam_d21_xpro.html#running-the-application"
  },"80": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Note that this application should have programming capabilities to I2C EEPROM | . | Once done repeat the applicable steps mentioned in Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/i2c_eeprom_bootloader/docs/readme_sam_d21_xpro.html#additional-steps-optional",
    "relUrl": "/apps/i2c_eeprom_bootloader/docs/readme_sam_d21_xpro.html#additional-steps-optional"
  },"81": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/i2c_eeprom_bootloader/docs/readme_sam_d21_xpro.html",
    "relUrl": "/apps/i2c_eeprom_bootloader/docs/readme_sam_d21_xpro.html"
  },"82": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Building and Running the SPI EEPROM Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_eeprom_bootloader/docs/readme_sam_d21_xpro.html#building-and-running-the-spi-eeprom-bootloader-applications",
    "relUrl": "/apps/spi_eeprom_bootloader/docs/readme_sam_d21_xpro.html#building-and-running-the-spi-eeprom-bootloader-applications"
  },"83": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/spi_eeprom_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_d21_xpro.X | MPLABX Project for SAM D21 Xplained Pro Evaluation Kit | . Programmer application . | Project Name | Description | . | app_programmer/firmware/sam_d21_xpro.X | MPLABX Project for SAM D21 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_eeprom_bootloader/docs/readme_sam_d21_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/spi_eeprom_bootloader/docs/readme_sam_d21_xpro.html#downloading-and-building-the-application"
  },"84": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM D21 Xplained Pro Evaluation Kit",
    "content": ". | To run the demo, the following additional hardware are required: . | One EEPROM 4 click board . | One mikroBUS Xplained Pro board . | . | Install the EEPROM 4 click board on to the mikroBUS Xplained Pro board . | Connect mikroBUS Xplained Pro board to the EXT2 header . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_eeprom_bootloader/docs/readme_sam_d21_xpro.html#setting-up-sam-d21-xplained-pro-evaluation-kit",
    "relUrl": "/apps/spi_eeprom_bootloader/docs/readme_sam_d21_xpro.html#setting-up-sam-d21-xplained-pro-evaluation-kit"
  },"85": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to UART Host Script Help for setting up the uart_host.py utility used to send the application binary from host PC . | There will be no reset command sent from host after programming by default. | Reboot command has to be sent separately only after successful programming to trigger bootloader from programmer application . | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_eeprom_bootloader/docs/readme_sam_d21_xpro.html#setting-up-the-host-script",
    "relUrl": "/apps/spi_eeprom_bootloader/docs/readme_sam_d21_xpro.html#setting-up-the-host-script"
  },"86": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/sam_d21_xpro.X in the IDE . | Make sure that the app_programmer/firmware/sam_d21_xpro.X is added as a loadable project to bootloader application . | As the SPI EEPROM may not have any valid binary required by bootloader for the first time, Adding the app_programmer as loadable allows MPLAB X to create a unified hex file and program both these applications in their respective memory locations based on their linker script configurations | . | Build and program the bootloader application using the IDE . | Once programming is done bootloader starts execution and directly jumps to application space to run the programmer application . | LED0 starts blinking every 500ms indicating that the programmer application is running | . | Open the programmer application project app_programmer/firmware/sam_d21_xpro.X in the IDE . | Update app_programmer/firmware/src/app.c to reduce the LED blink duration from 500ms to 100ms as below . APP_TIMER_DelayMs(100); . | Clean and Build the project to generate the binary (Do not program the binary) . | Run the uart_host.py from command prompt to program the updated programmer application binary in SPI EEPROM . python &lt;harmony3_path&gt;/bootloader_apps_serial_memory/tools/uart_host.py -v -i &lt;COM PORT&gt; -d samd2x -a 0x2000 -f &lt;harmony3_path&gt;/bootloader_apps_serial_memory/apps/spi_eeprom_bootloader/app_programmer/firmware/sam_d21_xpro.X/dist/sam_d21_xpro/production/sam_d21_xpro.X.production.bin . | Following snapshot shows output of successfully programming the programmer application . | LED0 should still be blinking every 500ms | . | Run the uart_host.py from command prompt to send a Reboot command. This command Updates MetaData and triggers Bootloader to program the updated binary from SPI EEPROM to Internal Flash . python &lt;harmony3_path&gt;/bootloader_apps_serial_memory/tools/uart_host.py -v -i &lt;COM PORT&gt; -r . | Once Firmware Update is successful LED0 should start blinking every 100ms indicating updated programmer application running . | If there was any error you may need to power cycle the device to retry firmware upgrade | . | Update app_programmer/firmware/src/app.c to revert LED blink duration to 500ms from 100ms as below . APP_TIMER_DelayMs(500); . | Clean and Build the project to generate the binary (Do not program the binary) . | Repeat Step 8-9. | You should see LED0 still blinking every 100ms | . | Press the Switch SW0 to Update MetaData and trigger Bootloader to program the updated binary from SPI EEPROM to Internal Flash . | Once Firmware Update is successful LED0 should start blinking every 500ms indicating updated programmer application running . | If there was any error you may need to power cycle the device to retry firmware upgrade | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_eeprom_bootloader/docs/readme_sam_d21_xpro.html#running-the-application",
    "relUrl": "/apps/spi_eeprom_bootloader/docs/readme_sam_d21_xpro.html#running-the-application"
  },"87": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Note that this application should have programming capabilities to SPI EEPROM | . | Once done repeat the applicable steps mentioned in Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_eeprom_bootloader/docs/readme_sam_d21_xpro.html#additional-steps-optional",
    "relUrl": "/apps/spi_eeprom_bootloader/docs/readme_sam_d21_xpro.html#additional-steps-optional"
  },"88": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/spi_eeprom_bootloader/docs/readme_sam_d21_xpro.html",
    "relUrl": "/apps/spi_eeprom_bootloader/docs/readme_sam_d21_xpro.html"
  },"89": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Building and Running the File System based QSPI Flash Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/qspi/docs/readme_sam_e54_xpro.html#building-and-running-the-file-system-based-qspi-flash-bootloader-applications",
    "relUrl": "/apps/fs/qspi/docs/readme_sam_e54_xpro.html#building-and-running-the-file-system-based-qspi-flash-bootloader-applications"
  },"90": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/fs/qspi/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_e54_xpro.X | MPLABX Project for SAM E54 Xplained Pro Evaluation Kit | . Programmer application . | Project Name | Description | . | app_programmer/firmware/sam_e54_xpro.X | MPLABX Project for SAM E54 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/qspi/docs/readme_sam_e54_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/fs/qspi/docs/readme_sam_e54_xpro.html#downloading-and-building-the-application"
  },"91": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM E54 Xplained Pro Evaluation Kit",
    "content": ". | To run the demo, the following additional hardware are required: . | One micro SD Card | . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/qspi/docs/readme_sam_e54_xpro.html#setting-up-sam-e54-xplained-pro-evaluation-kit",
    "relUrl": "/apps/fs/qspi/docs/readme_sam_e54_xpro.html#setting-up-sam-e54-xplained-pro-evaluation-kit"
  },"92": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/sam_e54_xpro.X in the IDE . | Make sure that the app_programmer/firmware/sam_e54_xpro.X is added as a loadable project to bootloader application . | As the QSPI Flash memory may not have any valid binary required by bootloader for the first time, Adding the app_programmer as loadable allows MPLAB X to create a unified hex file and program both these applications in their respective memory locations based on their linker script configurations | . | Open the Terminal application (Ex.:Tera Term) on the computer to get programmer application messages through UART once loaded | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and program the bootloader application using the IDE . | Once programming is done bootloader starts execution and directly jumps to application space to run the programmer application . | LED0 starts blinking indicating that the programmer application is running and you should see below output on the console . | . | Open the programmer application project app_programmer/firmware/sam_e54_xpro.X in the IDE . | Update app_programmer/firmware/src/app_monitor.c to update printf message from Serial Memory to QSPI Flash Memory as below . printf(\"\\r\\n###### File System (QSPI Flash Memory) Programmer Application Running ######\\r\\n\"); . | Clean and Build the project to generate the binary (Do not program the binary) . | Copy the generated application binary file to a sdcard from the Host PC . | &lt;harmony3_path&gt;/bootloader_apps_serial_memory/apps/fs/qspi/app_programmer/firmware/sam_e54_xpro.X/dist/sam_e54_xpro/production/sam_e54_xpro.X.production.bin | . | Rename the copied application binary file to image.bin . | Insert the sdcard with the application binary image.bin in the sdcard slot of the device | Following snapshot shows output of successfully copying the programmer application binary to QSPI Flash Memory . | LED0 should still be blinking . | . | Remove the sdcard from the sdcard slot . | Press and hold the Switch SW0 to trigger Bootloader from programmer application and you should see below output . | Once Firmware Update is successful LED0 should start blinking indicating updated programmer application running and you should see below output on the console . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/qspi/docs/readme_sam_e54_xpro.html#running-the-application",
    "relUrl": "/apps/fs/qspi/docs/readme_sam_e54_xpro.html#running-the-application"
  },"93": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Note that this application should have programming capabilities to QSPI Flash Memory | . | Once done repeat the applicable steps mentioned in Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/qspi/docs/readme_sam_e54_xpro.html#additional-steps-optional",
    "relUrl": "/apps/fs/qspi/docs/readme_sam_e54_xpro.html#additional-steps-optional"
  },"94": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/qspi/docs/readme_sam_e54_xpro.html",
    "relUrl": "/apps/fs/qspi/docs/readme_sam_e54_xpro.html"
  },"95": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Building and Running the QSPI Flash Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_sam_e54_xpro.html#building-and-running-the-qspi-flash-bootloader-applications",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_sam_e54_xpro.html#building-and-running-the-qspi-flash-bootloader-applications"
  },"96": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/qspi_flash_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_e54_xpro.X | MPLABX Project for SAM E54 Xplained Pro Evaluation Kit | . Programmer application . | Project Name | Description | . | app_programmer/firmware/sam_e54_xpro.X | MPLABX Project for SAM E54 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_sam_e54_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_sam_e54_xpro.html#downloading-and-building-the-application"
  },"97": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM E54 Xplained Pro Evaluation Kit",
    "content": ". | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_sam_e54_xpro.html#setting-up-sam-e54-xplained-pro-evaluation-kit",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_sam_e54_xpro.html#setting-up-sam-e54-xplained-pro-evaluation-kit"
  },"98": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to UART Host Script Help for setting up the uart_host.py utility used to send the application binary from host PC . | There will be no reset command sent from host after programming by default. | Reboot command has to be sent separately only after successful programming to trigger bootloader from programmer application . | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_sam_e54_xpro.html#setting-up-the-host-script",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_sam_e54_xpro.html#setting-up-the-host-script"
  },"99": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/sam_e54_xpro.X in the IDE . | Make sure that the app_programmer/firmware/sam_e54_xpro.X is added as a loadable project to bootloader application . | As the QSPI Flash memory may not have any valid binary required by bootloader for the first time, Adding the app_programmer as loadable allows MPLAB X to create a unified hex file and program both these applications in their respective memory locations based on their linker script configurations | . | Build and program the bootloader application using the IDE . | Once programming is done bootloader starts execution and directly jumps to application space to run the programmer application . | LED0 starts blinking every 500ms indicating that the programmer application is running | . | Open the programmer application project app_programmer/firmware/sam_e54_xpro.X in the IDE . | Update app_programmer/firmware/src/app.c to reduce the LED blink duration from 500ms to 100ms as below . APP_TIMER_DelayMs(100); . | Clean and Build the project to generate the binary (Do not program the binary) . | Run the uart_host.py from command prompt to program the updated programmer application binary in QSPI Flash memory . python &lt;harmony3_path&gt;/bootloader_apps_serial_memory/tools/uart_host.py -v -i &lt;COM PORT&gt; -d same5x -a 0x2000 -f &lt;harmony3_path&gt;/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/app_programmer/firmware/sam_e54_xpro.X/dist/sam_e54_xpro/production/sam_e54_xpro.X.production.bin . | Following snapshot shows output of successfully programming the programmer application . | LED0 should still be blinking every 500ms | . | Run the uart_host.py from command prompt to send a Reboot command. This command Updates MetaData and triggers Bootloader to program the updated binary from QSPI Flash to Internal Flash . python &lt;harmony3_path&gt;/bootloader_apps_serial_memory/tools/uart_host.py -v -i &lt;COM PORT&gt; -r . | Once Firmware Update is successful LED0 should start blinking every 100ms indicating updated programmer application running . | If there was any error you may need to power cycle the device to retry firmware upgrade | . | Update app_programmer/firmware/src/app.c to revert LED blink duration to 500ms from 100ms as below . APP_TIMER_DelayMs(500); . | Clean and Build the project to generate the binary (Do not program the binary) . | Repeat Step 8-9. | You should see LED0 still blinking every 100ms | . | Press the Switch SW0 to Update MetaData and trigger Bootloader to program the updated binary from QSPI Flash to Internal Flash . | Once Firmware Update is successful LED0 should start blinking every 500ms indicating updated programmer application running . | If there was any error you may need to power cycle the device to retry firmware upgrade | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_sam_e54_xpro.html#running-the-application",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_sam_e54_xpro.html#running-the-application"
  },"100": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Note that this application should have programming capabilities to QSPI Flash Memory | . | Once done repeat the applicable steps mentioned in Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_sam_e54_xpro.html#additional-steps-optional",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_sam_e54_xpro.html#additional-steps-optional"
  },"101": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_sam_e54_xpro.html",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_sam_e54_xpro.html"
  },"102": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Building and Running the QSPI Flash Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_sam_e70_xult.html#building-and-running-the-qspi-flash-bootloader-applications",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_sam_e70_xult.html#building-and-running-the-qspi-flash-bootloader-applications"
  },"103": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/qspi_flash_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_e70_xult.X | MPLABX Project for SAM E70 Xplained Ultra Evaluation Kit | . Programmer application . | Project Name | Description | . | app_programmer/firmware/sam_e70_xult.X | MPLABX Project for SAM E70 Xplained Ultra Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_sam_e70_xult.html#downloading-and-building-the-application",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_sam_e70_xult.html#downloading-and-building-the-application"
  },"104": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Setting up SAM E70 Xplained Ultra Evaluation Kit",
    "content": ". | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_sam_e70_xult.html#setting-up-sam-e70-xplained-ultra-evaluation-kit",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_sam_e70_xult.html#setting-up-sam-e70-xplained-ultra-evaluation-kit"
  },"105": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to UART Host Script Help for setting up the uart_host.py utility used to send the application binary from host PC . | There will be no reset command sent from host after programming by default. | Reboot command has to be sent separately only after successful programming to trigger bootloader from programmer application . | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_sam_e70_xult.html#setting-up-the-host-script",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_sam_e70_xult.html#setting-up-the-host-script"
  },"106": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/sam_e70_xult.X in the IDE . | Make sure that the app_programmer/firmware/sam_e70_xult.X is added as a loadable project to bootloader application . | As the QSPI Flash memory may not have any valid binary required by bootloader for the first time, Adding the app_programmer as loadable allows MPLAB X to create a unified hex file and program both these applications in their respective memory locations based on their linker script configurations | . | Build and program the bootloader application using the IDE . | Once programming is done bootloader starts execution and directly jumps to application space to run the programmer application . | LED1 starts blinking every 500ms indicating that the programmer application is running | . | Open the programmer application project app_programmer/firmware/sam_e70_xult.X in the IDE . | Update app_programmer/firmware/src/app.c to reduce the LED blink duration from 500ms to 100ms as below . APP_TIMER_DelayMs(100); . | Clean and Build the project to generate the binary (Do not program the binary) . | Run the uart_host.py from command prompt to program the updated programmer application binary in QSPI Flash memory . python &lt;harmony3_path&gt;/bootloader_apps_serial_memory/tools/uart_host.py -v -i &lt;COM PORT&gt; -d same7x -a 0x402000 -f &lt;harmony3_path&gt;/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/app_programmer/firmware/sam_e70_xult.X/dist/sam_e70_xult/production/sam_e70_xult.X.production.bin . | Following snapshot shows output of successfully programming the programmer application . | LED1 should still be blinking every 500ms | . | Run the uart_host.py from command prompt to send a Reboot command. This command Updates MetaData and triggers Bootloader to program the updated binary from QSPI Flash to Internal Flash . python &lt;harmony3_path&gt;/bootloader_apps_serial_memory/tools/uart_host.py -v -i &lt;COM PORT&gt; -r . | Once Firmware Update is successful LED1 should start blinking every 100ms indicating updated programmer application running . | If there was any error you may need to power cycle the device to retry firmware upgrade | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_sam_e70_xult.html#running-the-application",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_sam_e70_xult.html#running-the-application"
  },"107": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Note that this application should have programming capabilities to QSPI Flash Memory | . | Once done repeat the applicable steps mentioned in Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_sam_e70_xult.html#additional-steps-optional",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_sam_e70_xult.html#additional-steps-optional"
  },"108": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/docs/readme_sam_e70_xult.html",
    "relUrl": "/apps/qspi_flash_bootloader/docs/readme_sam_e70_xult.html"
  },"109": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Building and Running the File System based QSPI Flash Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/qspi/docs/readme_sam_e70_xult.html#building-and-running-the-file-system-based-qspi-flash-bootloader-applications",
    "relUrl": "/apps/fs/qspi/docs/readme_sam_e70_xult.html#building-and-running-the-file-system-based-qspi-flash-bootloader-applications"
  },"110": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/fs/qspi/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_e70_xult.X | MPLABX Project for SAM E70 Xplained Ultra Evaluation Kit | . Programmer application . | Project Name | Description | . | app_programmer/firmware/sam_e70_xult.X | MPLABX Project for SAM E70 Xplained Ultra Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/qspi/docs/readme_sam_e70_xult.html#downloading-and-building-the-application",
    "relUrl": "/apps/fs/qspi/docs/readme_sam_e70_xult.html#downloading-and-building-the-application"
  },"111": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Setting up SAM E70 Xplained Ultra Evaluation Kit",
    "content": ". | To run the demo, the following additional hardware are required: . | One micro SD Card | . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/qspi/docs/readme_sam_e70_xult.html#setting-up-sam-e70-xplained-ultra-evaluation-kit",
    "relUrl": "/apps/fs/qspi/docs/readme_sam_e70_xult.html#setting-up-sam-e70-xplained-ultra-evaluation-kit"
  },"112": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the bootloader project bootloader/firmware/sam_e70_xult.X in the IDE . | Make sure that the app_programmer/firmware/sam_e70_xult.X is added as a loadable project to bootloader application . | As the QSPI Flash memory may not have any valid binary required by bootloader for the first time, Adding the app_programmer as loadable allows MPLAB X to create a unified hex file and program both these applications in their respective memory locations based on their linker script configurations | . | Open the Terminal application (Ex.:Tera Term) on the computer to get programmer application messages through UART once loaded | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and program the bootloader application using the IDE . | Once programming is done bootloader starts execution and directly jumps to application space to run the programmer application . | LED1 starts blinking indicating that the programmer application is running and you should see below output on the console . | . | Open the programmer application project app_programmer/firmware/sam_e70_xult.X in the IDE . | Update app_programmer/firmware/src/app_monitor.c to update printf message from Serial Memory to QSPI Flash Memory as below . printf(\"\\r\\n###### File System (QSPI Flash Memory) Programmer Application Running ######\\r\\n\"); . | Clean and Build the project to generate the binary (Do not program the binary) . | Copy the generated application binary file to a sdcard from the Host PC . | &lt;harmony3_path&gt;/bootloader_apps_serial_memory/apps/fs/qspi/app_programmer/firmware/sam_e70_xult.X/dist/sam_e70_xult/production/sam_e70_xult.X.production.bin | . | Rename the copied application binary file to image.bin . | Insert the sdcard with the application binary image.bin in the micro-sd card slot of the device . | Following snapshot shows output of successfully copying the programmer application binary to QSPI Flash Memory . | LED1 should still be blinking . | . | Remove the sdcard from the sdcard slot . | Short PB03 with GND on EXT1 to trigger Bootloader from programmer application and you should see below output . | Using PB03 GPIO pin for triggering bootloader as the On Board Switch SW0 is shared with QSPI_CS pin. | . | Once Firmware Update is successful LED1 should start blinking indicating updated programmer application running and you should see below output on the console . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/qspi/docs/readme_sam_e70_xult.html#running-the-application",
    "relUrl": "/apps/fs/qspi/docs/readme_sam_e70_xult.html#running-the-application"
  },"113": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Note that this application should have programming capabilities to QSPI Flash Memory | . | Once done repeat the applicable steps mentioned in Running The Application | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/qspi/docs/readme_sam_e70_xult.html#additional-steps-optional",
    "relUrl": "/apps/fs/qspi/docs/readme_sam_e70_xult.html#additional-steps-optional"
  },"114": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/apps/fs/qspi/docs/readme_sam_e70_xult.html",
    "relUrl": "/apps/fs/qspi/docs/readme_sam_e70_xult.html"
  },"115": {
    "doc": "UART Host Script",
    "title": "UART Host Script Help",
    "content": "This document describes the usage of uart_host.py host script . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/tools/docs/readme_uart_host.html#uart-host-script-help",
    "relUrl": "/tools/docs/readme_uart_host.html#uart-host-script-help"
  },"116": {
    "doc": "UART Host Script",
    "title": "Downloading the host script",
    "content": "To clone or download the host tools from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the tool in bootloader_apps_serial_memory repository is tools/uart_host.py . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/tools/docs/readme_uart_host.html#downloading-the-host-script",
    "relUrl": "/tools/docs/readme_uart_host.html#downloading-the-host-script"
  },"117": {
    "doc": "UART Host Script",
    "title": "Setting up the Host PC",
    "content": ". | The Script is only compatible with Python 3.x . | It requires pyserial package to communicate with device over UART. Use below command to install the pyserial package . pip3 install pyserial . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/tools/docs/readme_uart_host.html#setting-up-the-host-pc",
    "relUrl": "/tools/docs/readme_uart_host.html#setting-up-the-host-pc"
  },"118": {
    "doc": "UART Host Script",
    "title": "Description",
    "content": ". | This host script should be used to communicate with the programmer application running on the device via UART interface . | It is a command line interface and implements the uart bootloader protocol required to communicate from host PC . | If size of the input binary file is not aligned to device erase boundary it appends 0xFF to the binary to make it aligned and then sends the binary to the device . | The input address for the host tool should be the Internal Flash Address from where the binary will run . | There will be no reset command sent from host after programming by default as done in uart bootloader case . | Reboot command has to be sent separately only after successful programming to trigger bootloader from programmer application . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/tools/docs/readme_uart_host.html#description",
    "relUrl": "/tools/docs/readme_uart_host.html#description"
  },"119": {
    "doc": "UART Host Script",
    "title": "Usage Examples",
    "content": "Below is the syntax to show help menu for the script . python &lt;harmony3_path&gt;/bootloader_apps_serial_memory/tools/uart_host.py --help . Below is the syntax and an example to program a binary in Serial Memory . python &lt;harmony3_path&gt;/bootloader_apps_serial_memory/tools/uart_host.py -v -i &lt;COM PORT&gt; -d &lt;Device Name&gt; -a &lt;address&gt; -f &lt;Application_binary_path&gt; . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i COM7 -d same5x -a 0x2000 -f E:/projects/h3_bootloader/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/app_programmer/firmware/sam_e54_xpro.X/dist/sam_e54_xpro/production/sam_e54_xpro.X.production.bin . Below is the syntax and an example to send a Reboot command . python &lt;harmony3_path&gt;/bootloader_apps_serial_memory/tools/uart_host.py -v -i &lt;COM PORT&gt; -r . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i COM7 -r . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/tools/docs/readme_uart_host.html#usage-examples",
    "relUrl": "/tools/docs/readme_uart_host.html#usage-examples"
  },"120": {
    "doc": "UART Host Script",
    "title": "UART Host Script",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/tools/docs/readme_uart_host.html",
    "relUrl": "/tools/docs/readme_uart_host.html"
  },"121": {
    "doc": "Release notes",
    "title": "Microchip MPLAB® Harmony 3 Release Notes",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/release_notes.html#microchip-mplab-harmony-3-release-notes",
    "relUrl": "/release_notes.html#microchip-mplab-harmony-3-release-notes"
  },"122": {
    "doc": "Release notes",
    "title": "Serial Memory Bootloader Applications Release v3.1.0",
    "content": "New Features . | This release includes support of . | SPI EEPROM Bootloader Applications for PIC32MM | . | . Development kit and demo application support . | The following table provides bootloader demo applications available for different development kits. | Product Family | Development Kits | I2C EEPROM | SPI EEPROM | SPI Flash | QSPI Flash | FS SPI Flash | FS QSPI Flash | . | SAM D21/DA1 | SAM D21 Xplained Pro Evaluation Kit | Yes | Yes |   | NA |   | NA | . | SAM D5x/E5x | SAM E54 Xplained Pro Evaluation Kit |   |   |   | Yes |   | Yes | . | SAM E70/S70/V70/V71 | SAM E70 Xplained Ultra Evaluation Kit |   |   |   | Yes |   | Yes | . | PIC32MZ EF | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit |   |   |   | Yes |   |   | . | PIC32MZ EF | Curiosity PIC32MZ EF 2.0 Development Board |   |   |   |   |   | Yes | . | PIC32MZ DA | PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) |   |   |   | Yes |   |   | . | PIC32MZ W1 | PIC32 WFI32E Curiosity Board |   |   | Yes |   | Yes |   | . | PIC32MM | PIC32MM USB Curiosity board |   | Yes |   |   |   |   | . | NA: Lack of product capability . | . Known Issues . | N/A | . Development Tools . | MPLAB® X IDE v6.05 | MPLAB® XC32 C/C++ Compiler v4.20 | MPLAB® X IDE plug-ins: . | MPLAB® Code Configurator (MCC) v5.1.17 | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/release_notes.html#serial-memory-bootloader-applications-release-v310",
    "relUrl": "/release_notes.html#serial-memory-bootloader-applications-release-v310"
  },"123": {
    "doc": "Release notes",
    "title": "Serial Memory Bootloader Applications Release v3.0.0",
    "content": "New Features . | This release includes support of . | I2C EEPROM Bootloader Applications | SPI EEPROM Bootloader Applications | SPI Flash Bootloader Applications | QSPI Flash Bootloader Applications | File System based SPI Flash Bootloader Applications | File System based QSPI Flash Bootloader Applications | . | . Development kit and demo application support . | The following table provides bootloader demo applications available for different development kits. | Product Family | Development Kits | I2C EEPROM | SPI EEPROM | SPI Flash | QSPI Flash | FS SPI Flash | FS QSPI Flash | . | SAM D21/DA1 | SAM D21 Xplained Pro Evaluation Kit | Yes | Yes |   | NA |   | NA | . | SAM D5x/E5x | SAM E54 Xplained Pro Evaluation Kit |   |   |   | Yes |   | Yes | . | SAM E70/S70/V70/V71 | SAM E70 Xplained Ultra Evaluation Kit |   |   |   | Yes |   | Yes | . | PIC32MZ EF | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit |   |   |   | Yes |   |   | . | PIC32MZ EF | Curiosity PIC32MZ EF 2.0 Development Board |   |   |   |   |   | Yes | . | PIC32MZ DA | PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) |   |   |   | Yes |   |   | . | PIC32MZ W1 | PIC32 WFI32E Curiosity Board |   |   | Yes |   | Yes |   | . | NA: Lack of product capability . | . Known Issues . | N/A | . Development Tools . | MPLAB® X IDE v5.50 | MPLAB® XC32 C/C++ Compiler v3.00 | MPLAB® X IDE plug-ins: . | MPLAB® Harmony 3 Launcher v3.6.4 and above. | . | . ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/release_notes.html#serial-memory-bootloader-applications-release-v300",
    "relUrl": "/release_notes.html#serial-memory-bootloader-applications-release-v300"
  },"124": {
    "doc": "Release notes",
    "title": "Release notes",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/release_notes.html",
    "relUrl": "/release_notes.html"
  },"125": {
    "doc": "Serial Memory Bootloader Applications",
    "title": "Serial Memory Bootloader Applications",
    "content": "[![MCHP](https://www.microchip.com/ResourcePackages/Microchip/assets/dist/images/logo.png)](https://www.microchip.com) # MPLAB® Harmony 3 Serial Memory Bootloader Application Examples MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices. Refer to the following links for more information. - [Microchip 32-bit MCUs](https://www.microchip.com/design-centers/32-bit) - [Microchip 32-bit MPUs](https://www.microchip.com/design-centers/32-bit-mpus) - [Microchip MPLAB X IDE](https://www.microchip.com/mplab/mplab-x-ide) - [Microchip MPLAB Harmony](https://www.microchip.com/mplab/mplab-harmony) - [Microchip MPLAB Harmony Pages](https://microchip-mplab-harmony.github.io/) This repository contains the MPLAB® Harmony 3 Serial Memory Bootloader application examples - [Release Notes](/bootloader_apps_serial_memory/release_notes.html) - [MPLAB® Harmony License](/bootloader_apps_serial_memory/mplab_harmony_license.html) To clone or download these application from Github,go to the [main page of this repository](https://github.com/Microchip-MPLAB-Harmony/bootloader_apps_serial_memory) and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following [these instructions](https://github.com/Microchip-MPLAB-Harmony/contentmanager/wiki) ## Contents Summary | Folder | Description | --- | --- | apps | Serial Memory Bootloader example applications | docs | Applications help documentation | ## Bootloader Examples The following applications are provided to demonstrate the Serial Memory bootloaders | Name | Description | -------- | ----------- | [I2C EEPROM Bootloader](/bootloader_apps_serial_memory/apps/i2c_eeprom_bootloader/readme.html) | This example application shows how to use the Serial Memory Bootloader Library to bootload an application from I2C EEPROM (AT24) to Internal Flash | [SPI EEPROM Bootloader](/bootloader_apps_serial_memory/apps/spi_eeprom_bootloader/readme.html) | This example application shows how to use the Serial Memory Bootloader Library to bootload an application from SPI EEPROM (AT25) to Internal Flash | [SPI Flash Bootloader](/bootloader_apps_serial_memory/apps/spi_flash_bootloader/readme.html) | This example application shows how to use the Serial Memory Bootloader Library to bootload an application from SPI Flash memory (SST26) to Internal Flash | [QSPI Flash Bootloader](/bootloader_apps_serial_memory/apps/qspi_flash_bootloader/readme.html) | This example application shows how to use the Serial Memory Bootloader Library to bootload an application from QSPI Flash memory (SST26) to Internal Flash | [FS SPI Flash Bootloader](/bootloader_apps_serial_memory/apps/fs/spi/readme.html) | This example application shows how to use the File System Bootloader Library to bootload an application from SPI Flash memory (SST26) to Internal Flash | [FS QSPI Flash Bootloader](/bootloader_apps_serial_memory/apps/fs/qspi/readme.html) | This example application shows how to use the File System Bootloader Library to bootload an application from QSPI Flash memory (SST26) to Internal Flash | ## Bootloader Library Refer to [Bootloader Library Help](https://microchip-mplab-harmony.github.io/bootloader) for understanding - Bootloader framework - How the Bootloader library works - Bootloader library configurations - Bootloader memory layout ____ [![License](https://img.shields.io/badge/license-Harmony%20license-orange.svg)](https://github.com/Microchip-MPLAB-Harmony/bootloader_apps_serial_memory/blob/master/mplab_harmony_license.md) [![Latest release](https://img.shields.io/github/release/Microchip-MPLAB-Harmony/bootloader_apps_serial_memory.svg)](https://github.com/Microchip-MPLAB-Harmony/bootloader_apps_serial_memory/releases/latest) [![Latest release date](https://img.shields.io/github/release-date/Microchip-MPLAB-Harmony/bootloader_apps_serial_memory.svg)](https://github.com/Microchip-MPLAB-Harmony/bootloader_apps_serial_memory/releases/latest) [![Commit activity](https://img.shields.io/github/commit-activity/y/Microchip-MPLAB-Harmony/bootloader_apps_serial_memory.svg)](https://github.com/Microchip-MPLAB-Harmony/bootloader_apps_serial_memory/graphs/commit-activity) [![Contributors](https://img.shields.io/github/contributors-anon/Microchip-MPLAB-Harmony/bootloader_apps_serial_memory.svg)]() ____ [![Follow us on Youtube](https://img.shields.io/badge/Youtube-Follow%20us%20on%20Youtube-red.svg)](https://www.youtube.com/user/MicrochipTechnology) [![Follow us on LinkedIn](https://img.shields.io/badge/LinkedIn-Follow%20us%20on%20LinkedIn-blue.svg)](https://www.linkedin.com/company/microchip-technology) [![Follow us on Facebook](https://img.shields.io/badge/Facebook-Follow%20us%20on%20Facebook-blue.svg)](https://www.facebook.com/microchiptechnology/) [![Follow us on Twitter](https://img.shields.io/twitter/follow/MicrochipTech.svg?style=social)](https://twitter.com/MicrochipTech) [![](https://img.shields.io/github/stars/Microchip-MPLAB-Harmony/bootloader_apps_serial_memory.svg?style=social)]() [![](https://img.shields.io/github/watchers/Microchip-MPLAB-Harmony/bootloader_apps_serial_memory.svg?style=social)]() ",
    "url": "http://localhost:4000/bootloader_apps_serial_memory/",
    "relUrl": "/"
  }
}
